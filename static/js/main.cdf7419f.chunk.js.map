{"version":3,"sources":["contracts/external_contracts.js","hooks/OnBlock.js","hooks/Poller.js","hooks/Balance.js","hooks/ContractExistsAtAddress.js","hooks/ContractLoader.js","hooks/ContractReader.js","hooks/LookupAddress.js","hooks/ResolveName.js","hooks/TokenList.js","hooks/BurnerSigner.js","hooks/UserSigner.js","components/Address.jsx","components/Balance.jsx","constants.js","helpers/Transactor.js","helpers/nft-storage.js","components/Blockie.jsx","components/AddressInput.jsx","components/EtherInput.jsx","components/Wallet.jsx","components/Account.jsx","components/BytesStringInput.jsx","components/Contract/utils.js","components/Contract/DisplayVariable.jsx","components/Contract/FunctionForm.jsx","components/Contract/index.jsx","components/Faucet.jsx","components/GasGauge.jsx","components/Header.jsx","components/Ramp.jsx","components/Swap.jsx","components/ThemeSwitch.jsx","components/Timeline.jsx","components/L2Bridge.jsx","views/AnsiImageRender.jsx","views/ExampleUI.jsx","views/About.jsx","views/MyBlocks.jsx","views/Hints.jsx","views/Subgraph.jsx","App.jsx","hooks/ExchangePrice.js","hooks/GasPrice.js","hooks/EventListener.js","index.jsx"],"names":["module","exports","contracts","DAI","address","abi","inputs","internalType","name","type","payable","stateMutability","anonymous","indexed","constant","outputs","UNI","useOnBlock","provider","fn","args","savedCallback","useRef","useEffect","current","listener","blockNumber","length","on","off","usePoller","delay","extraWatch","id","setInterval","clearInterval","useBalance","pollTime","useState","balance","setBalance","pollBalance","useCallback","a","getBalance","newBalance","useContractExistsAtAddress","contractAddress","contractIsDeployed","setContractIsDeployed","checkDeployment","utils","isAddress","getCode","bytecode","ethers","require","useContractLoader","providerOrSigner","config","setContracts","customAddressKeys","customAddresses","Object","keys","join","customAddressValues","values","active","console","log","listAccounts","accounts","Signer","isSigner","signer","getSigner","getNetwork","providerNetwork","_chainId","chainId","contractList","externalContractList","hardhatContracts","e","externalContracts","combinedContracts","hardhatNetwork","prototype","hasOwnProperty","call","hardhatNetworkName","newContracts","reduce","accumulator","contractName","_address","includes","Contract","loadContracts","useContractReader","functionName","formatter","onChange","adjustPollTime","value","setValue","tried","setTried","setTimeout","bind","updateValue","newValue","lookupAddress","reportedName","resolveName","resolvedAddress","getAddress","useLookupAddress","ensName","setEnsName","cache","window","localStorage","getItem","JSON","parse","timestamp","Date","now","then","setItem","stringify","useTokenList","tokenListUri","tokenList","setTokenList","_tokenListUri","navigator","onLine","fetch","json","tokenListJson","_tokenList","tokens","filter","t","getTokenList","useUserSigner","injectedProvider","localProvider","setSigner","burnerSigner","key","storedValue","setStoredValue","error","storedKey","_newKey","Wallet","createRandom","privateKey","_signer","connect","useBurnerSigner","useMemo","injectedSigner","_isProvider","location","pathname","indexOf","rawPK","incomingPK","hash","replace","history","pushState","currentPrivateKey","Text","Typography","Address","props","ens","ensProvider","currentTheme","useThemeSwitcher","avatar","paragraph","rows","displayAddress","substr","size","text","etherscanLink","blockExplorer","blockExplorerLink","minimized","style","verticalAlign","color","target","href","rel","seed","toLowerCase","scale","editable","copyable","fontSize","paddingLeft","Balance","dollarMode","setDollarMode","floatBalance","parseFloat","usingBalance","etherBalance","formatEther","toFixed","displayBalance","price","dollarMultiplier","padding","cursor","onClick","INFURA_ID","NETWORKS","localhost","rpcUrl","hostname","mainnet","kovan","faucet","rinkeby","ropsten","goerli","xdai","gasPrice","matic","mumbai","localArbitrum","localArbitrumL1","rinkebyArbitrum","arbitrum","localOptimismL1","localOptimism","kovanOptimism","optimism","NETWORK","n","callbacks","Transactor","etherscan","tx","callback","network","options","notify","dappId","system","networkId","transactionHandler","txInformation","possibleFunction","transaction","Notify","etherscanNetwork","etherscanTxUrl","Promise","result","parseUnits","gasLimit","hexlify","sendTransaction","emitter","onclick","open","notification","info","message","description","placement","txResult","listeningInterval","getTransactionReceipt","currentTransactionReceipt","confirmations","wait","data","body","obj","errorObj","nftsClient","NFTStorage","token","StoreFileOnIPFS","imgFile","srcFile","reader","FileReader","store","image","File","properties","srcData","readAsText","metadata","url","embed","Blockie","AddressInput","scan","setScan","currentValue","scannerButton","marginTop","count","CameraOutlined","QrcodeOutlined","updateAddress","possibleAddress","scanner","zIndex","position","left","top","width","resolution","onError","onScan","possibleNewValue","lastIndexOf","autoComplete","autoFocus","placeholder","prefix","addonAfter","EtherInput","mode","setMode","display","setDisplay","option","title","usdValue","ethValue","Paragraph","signerAddress","setSignerAddress","newAddress","receiveButton","privateKeyButton","selectedAddress","setOpen","qr","setQr","amount","setAmount","toAddress","setToAddress","pk","setPK","providerSend","WalletOutlined","rotate","level","includeMargin","renderAs","imageSettings","excavate","KeyOutlined","wallet","extraPkDisplayAdded","extraPkDisplay","push","backgroundStyle","pastpk","pastwallet","_signingKey","reload","inputStyle","visible","float","paddingRight","onOk","onCancel","footer","disabled","loading","parseEther","to","SendOutlined","Account","userSigner","mainnetProvider","web3Modal","loadWeb3Modal","logoutOfWeb3Modal","modalButtons","cachedProvider","marginLeft","shape","src","constants","tryToDisplay","thing","toNumber","formatUnits","DisplayVariable","contractFunction","functionInfo","refreshRequired","triggerRefresh","variable","setVariable","refresh","funcResponse","span","textAlign","opacity","BigNumber","FunctionForm","form","setForm","txValue","setTxValue","returnValue","setReturnValue","inputIndex","map","input","buttons","isHexString","formUpdate","parseBytes32String","formatBytes32String","toUtf8String","toUtf8Bytes","trim","margin","event","suffix","txValueInput","floatValue","from","toHexString","buttonIcon","defaultValue","bordered","height","innerIndex","baseType","returned","overrides","noContractDisplay","className","borderRadius","fontWeight","marginRight","role","contract","customContract","account","show","displayedContractFunctions","interface","functions","contractDisplay","isQueryable","Faucet","blockie","setAddress","faucetAddress","setFaucetAddress","_faucetAddress","getFaucetAddress","icon","GasGauge","parseInt","Header","subTitle","Ramp","modalUp","setModalUp","allFaucets","networks","DollarCircleOutlined","RampInstantSDK","hostAppName","hostLogoUrl","swapAmount","swapAsset","userAddress","Select","Option","Swap","ThemeSwitcher","theme","isDarkMode","setIsDarkMode","switcher","themes","status","right","bottom","checked","isChecked","dark","light","AnsiImageRender","tokenURI","html","setNewState","isFetching","setIsFetching","fetchHtml","startsWith","replaceAll","endsWith","response","tokenUri","catch","err","arrayBuffer","TextDecoder","decode","htmlResp","AnsiUp","ansi_to_html","dangerouslySetInnerHTML","__html","nftsTestStoreString","s","custom","file","Blob","getModalStyle","transform","useModalStyles","makeStyles","paper","backgroundColor","palette","background","border","boxShadow","shadows","spacing","MakeBlockModal","fileObjectUrl","classes","React","modalStyle","selectedFileState","setSelectedFileState","uploadFileAndProceed","userMessage","undefined","lineHeight","evt","f","files","URL","createObjectURL","overflow","Modal","onClose","useStyles","root","flexGrow","secondary","RecentlySavedBlocks","limit","setNewFilterAddress","ansiUriArr","path","Grid","container","item","xs","paddingBottom","fontFamily","split","uri","i","maxWidth","Paper","AutoGrid","ExampleUI","myBBlocksCount","my1stBBlockTokenId","my1stBBlockTokenURI","setPurposeEvents","purpose","yourLocalBalance","readContracts","writeContracts","newPurpose","setNewPurpose","newTokenURI","setNewTokenURI","toString","YourContract","mint","update","gasUsed","gas","setTokenURI","setPurpose","encodeFunctionData","dataSource","renderItem","Item","sender","SyncOutlined","spin","range","defaultChecked","percent","About","ShowUpdateTokenUriModalDialog","tokenId","isDefaultOpen","hideButton","handleClose","fileState","BBoard","addContentToBBlock","sectionH2","MainScroll","justifyContent","MintBlockCard","blockMintFee","tokenSupply","nextBlockID","Math","floor","BlockCardsForSale","browserAddress","bBlocks","b","BlockCard","bblockId","ownerAddress","owner","seller","BlockCardsByAddress","localTokenId","sellBBlock","MyBlocks","filterAddress","setFilterAddress","newFilterAddress","addressBlockCount","setAddressBlockCount","newTokenId","setNewTokenId","showUpdateTokenUriModal","setshowUpdateTokenUriModal","blocksCount","addr","balanceOf","createToken","_tx","receipt","events","pop","assert","mintedTokenId","Hints","selectedToken","setSelectedToken","listOfTokens","showSearch","filterOption","children","optionFilterProp","symbol","highlight","Subgraph","EXAMPLE_GRAPHQL","EXAMPLE_GQL","gql","useQuery","pollInterval","purposeColumns","dataIndex","render","record","d","toISOString","deployWarning","purposes","columns","rowKey","fetcher","graphQLParams","subgraphUri","method","headers","docExplorerOpen","query","targetNetwork","mainnetInfura","providers","StaticJsonRpcProvider","localProviderUrl","localProviderUrlFromEnv","process","REACT_APP_PROVIDER","walletLinkProvider","WalletLink","appName","makeWeb3Provider","Web3Modal","cacheProvider","providerOptions","walletconnect","package","WalletConnectProvider","bridge","infuraId","rpc","logo","connector","enable","App","setInjectedProvider","clearCachedProvider","disconnect","setPrice","Token","Fetcher","fetchPairData","WETH","pair","route","Route","midPrice","toSignificant","getPrice","useExchangePrice","speed","setGasPrice","loadGasPrice","axios","get","newGasPrice","useGasPrice","localChainId","_network","selectedChainId","faucetTx","yourMainnetBalance","mainnetContracts","_lastBlockNumber","myMainnetDAIBalance","eventName","startBlock","updates","setUpdates","resetEventsBlock","messages","removeListener","useEventListener","networkDisplay","networkSelected","networkLocal","closable","ethereum","chainName","nativeCurrency","rpcUrls","blockExplorerUrls","request","params","Web3Provider","code","reason","setRoute","faucetHint","faucetAvailable","connection","faucetClicked","setFaucetClicked","selectedKeys","exact","align","gutter","prevTheme","client","ApolloClient","InMemoryCache","ReactDOM","ApolloProvider","themeMap","defaultTheme","document","getElementById"],"mappings":"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","file":"static/js/main.cdf7419f.chunk.js","sourcesContent":["const ERC20ABI = [\n  {\n    constant: true,\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_from\",\n        type: \"address\",\n      },\n      {\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        name: \"balance\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    payable: true,\n    stateMutability: \"payable\",\n    type: \"fallback\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n];\nconst DAIABI = [\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"chainId_\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"guy\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: true,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes4\",\n        name: \"sig\",\n        type: \"bytes4\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"arg1\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"arg2\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes\",\n        name: \"data\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"LogNote\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"DOMAIN_SEPARATOR\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"PERMIT_TYPEHASH\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"burn\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        internalType: \"uint8\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"guy\",\n        type: \"address\",\n      },\n    ],\n    name: \"deny\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mint\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"move\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"nonces\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"holder\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"nonce\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"expiry\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"allowed\",\n        type: \"bool\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"v\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"r\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"s\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"permit\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"pull\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"push\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"guy\",\n        type: \"address\",\n      },\n    ],\n    name: \"rely\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"version\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"wards\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\n// Mainnet DAI, Optimism and Arbitrium Rollup Contracts with local addresses\nmodule.exports = {\n  1: {\n    contracts: {\n      DAI: {\n        address: \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n        abi: DAIABI,\n      },\n      UNI: {\n        address: \"0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984\",\n        abi: ERC20ABI,\n      },\n    },\n  },\n};\n","import { useEffect, useRef } from \"react\";\n\n// helper hook to call a function regularly in time intervals\nconst DEBUG = false;\n\nexport default function useOnBlock(provider, fn, args) {\n  const savedCallback = useRef();\n  // Remember the latest fn.\n  useEffect(() => {\n    savedCallback.current = fn;\n  }, [fn]);\n\n  // Turn on the listener if we have a function & a provider\n  useEffect(() => {\n    if (fn && provider) {\n      const listener = blockNumber => {\n        if (DEBUG) console.log(blockNumber, fn, args, provider.listeners());\n\n        if (args && args.length > 0) {\n          savedCallback.current(...args);\n        } else {\n          savedCallback.current();\n        }\n      };\n\n      provider.on(\"block\", listener);\n\n      return () => {\n        provider.off(\"block\", listener);\n      };\n    }\n  }, [provider]);\n}\n","import { useEffect, useRef } from \"react\";\n\n// helper hook to call a function regularly in time intervals\n\nexport default function usePoller(fn, delay, extraWatch) {\n  const savedCallback = useRef();\n  // Remember the latest fn.\n  useEffect(() => {\n    savedCallback.current = fn;\n  }, [fn]);\n  // Set up the interval.\n  // eslint-disable-next-line consistent-return\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n  // run at start too\n  useEffect(() => {\n    fn();\n  }, [extraWatch]);\n}\n","import { useCallback, useState, useEffect } from \"react\";\nimport useOnBlock from \"./OnBlock\";\nimport usePoller from \"./Poller\";\n\n/*\n  ~ What it does? ~\n\n  Gets your balance in ETH from given address and provider\n\n  ~ How can I use? ~\n\n  const yourLocalBalance = useBalance(localProvider, address);\n\n  ~ Features ~\n\n  - Provide address and get balance corresponding to given address\n  - Change provider to access balance on different chains (ex. mainnetProvider)\n  - If no pollTime is passed, the balance will update on every new block\n*/\n\nconst DEBUG = false;\n\nexport default function useBalance(provider, address, pollTime = 0) {\n  const [balance, setBalance] = useState();\n\n  const pollBalance = useCallback(\n    async (provider, address) => {\n      if (provider && address) {\n        const newBalance = await provider.getBalance(address);\n        if (newBalance !== balance) {\n          setBalance(newBalance);\n        }\n      }\n    },\n    [provider, address],\n  );\n\n  // Only pass a provider to watch on a block if there is no pollTime\n  useOnBlock(pollTime === 0 && provider, () => {\n    if (provider && address && pollTime === 0) {\n      pollBalance(provider, address);\n    }\n  });\n\n  // Update balance when the address or provider changes\n  useEffect(() => {\n    if (address && provider) pollBalance(provider, address);\n  }, [address, provider, pollBalance]);\n\n  // Use a poller if a pollTime is provided\n  usePoller(\n    async () => {\n      if (provider && address && pollTime > 0) {\n        if (DEBUG) console.log(\"polling!\", address);\n        pollBalance();\n      }\n    },\n    pollTime,\n    provider && address,\n  );\n\n  return balance;\n}\n","import { utils } from \"ethers\";\nimport { useEffect, useState } from \"react\";\n\n/*\n  ~ What it does? ~\n\n  Checks whether a contract exists on the blockchain, returns true if it exists, otherwise false\n\n  ~ How can I use? ~\n\n  const contractIsDeployed = useContractExistsAtAddress(localProvider, contractAddress);\n\n  ~ Features ~\n\n  - Provide contractAddress to check if the contract is deployed\n  - Change provider to check contract address on different chains (ex. mainnetProvider)\n*/\n\nconst useContractExistsAtAddress = (provider, contractAddress) => {\n  const [contractIsDeployed, setContractIsDeployed] = useState(false);\n\n  // We can look at the blockchain and see what's stored at `contractAddress`\n  // If we find code then we know that a contract exists there.\n  // If we find nothing (0x0) then there is no contract deployed to that address\n  useEffect(() => {\n    // eslint-disable-next-line consistent-return\n    const checkDeployment = async () => {\n      if (!utils.isAddress(contractAddress)) return false;\n      const bytecode = await provider.getCode(contractAddress);\n      setContractIsDeployed(bytecode !== \"0x0\");\n    };\n    if (provider) checkDeployment();\n  }, [provider, contractAddress]);\n\n  return contractIsDeployed;\n};\n\nexport default useContractExistsAtAddress;\n","/* eslint-disable global-require */\nimport { useEffect, useState } from \"react\";\n\nconst { ethers } = require(\"ethers\");\n\n/*\n  ~ What it does? ~\n\n  Loads your local contracts and gives options to read values from contracts\n  or write transactions into them\n\n  ~ How can I use? ~\n\n  const readContracts = useContractLoader(localProvider) // or\n  const writeContracts = useContractLoader(userProvider)\n\n  ~ Features ~\n\n  - localProvider enables reading values from contracts\n  - userProvider enables writing transactions into contracts\n  - Example of keeping track of \"purpose\" variable by loading contracts into readContracts\n    and using ContractReader.js hook:\n    const purpose = useContractReader(readContracts,\"YourContract\", \"purpose\")\n  - Example of using setPurpose function from our contract and writing transactions by Transactor.js helper:\n    tx( writeContracts.YourContract.setPurpose(newPurpose) )\n\n  config can include:\n  - chainId - to hardcode the chainId, irrespective of the providerOrSigner chainId\n  - hardhatNetworkName - to hardcode the hardhat network of interest\n  - customAddresses: { contractName: 0xCustomAddress } to hardcode the address for a given named contract\n  - hardhatContracts: object following the hardhat deploy export format (Json with chainIds as keys, which have hardhat network names as keys, which contain arrays of contracts for each)\n  - externalContracts: object with chainIds as keys, with an array of contracts for each\n*/\n\nexport default function useContractLoader(providerOrSigner, config = {}) {\n  const [contracts, setContracts] = useState();\n\n  const customAddressKeys = config.customAddresses && Object.keys(config.customAddresses).join();\n  const customAddressValues = config.customAddresses && Object.values(config.customAddresses).join();\n\n  useEffect(() => {\n    let active = true;\n\n    async function loadContracts() {\n      if (providerOrSigner && typeof providerOrSigner !== \"undefined\") {\n        console.log(`loading contracts`);\n        try {\n          // we need to check to see if this providerOrSigner has a signer or not\n          let signer;\n          let provider;\n          let accounts;\n\n          if (providerOrSigner && typeof providerOrSigner.listAccounts === \"function\") {\n            accounts = await providerOrSigner.listAccounts();\n          }\n\n          if (ethers.Signer.isSigner(providerOrSigner)) {\n            signer = providerOrSigner;\n            provider = signer.provider;\n          } else if (accounts && accounts.length > 0) {\n            signer = providerOrSigner.getSigner();\n            provider = providerOrSigner;\n          } else {\n            signer = providerOrSigner;\n            provider = providerOrSigner;\n          }\n\n          const providerNetwork = await provider.getNetwork();\n\n          const _chainId = config.chainId || providerNetwork.chainId;\n\n          let contractList = {};\n          let externalContractList = {};\n          try {\n            contractList = config.hardhatContracts || require(\"../contracts/hardhat_contracts.json\");\n          } catch (e) {\n            console.log(e);\n          }\n          try {\n            externalContractList = config.externalContracts || require(\"../contracts/external_contracts.js\");\n          } catch (e) {\n            console.log(e);\n          }\n\n          let combinedContracts = {};\n\n          if (contractList[_chainId]) {\n            for (const hardhatNetwork in contractList[_chainId]) {\n              if (Object.prototype.hasOwnProperty.call(contractList[_chainId], hardhatNetwork)) {\n                if (!config.hardhatNetworkName || hardhatNetwork === config.hardhatNetworkName) {\n                  combinedContracts = {\n                    ...combinedContracts,\n                    ...contractList[_chainId][hardhatNetwork].contracts,\n                  };\n                }\n              }\n            }\n          }\n\n          if (externalContractList[_chainId]) {\n            combinedContracts = { ...combinedContracts, ...externalContractList[_chainId].contracts };\n          }\n\n          const newContracts = Object.keys(combinedContracts).reduce((accumulator, contractName) => {\n            const _address =\n              config.customAddresses && Object.keys(config.customAddresses).includes(contractName)\n                ? config.customAddresses[contractName]\n                : combinedContracts[contractName].address;\n            accumulator[contractName] = new ethers.Contract(_address, combinedContracts[contractName].abi, signer);\n            return accumulator;\n          }, {});\n          if (active) setContracts(newContracts);\n        } catch (e) {\n          console.log(\"ERROR LOADING CONTRACTS!!\", e);\n        }\n      }\n    }\n    loadContracts();\n\n    return () => {\n      active = false;\n    };\n  }, [providerOrSigner, config.chainId, config.hardhatNetworkName, customAddressKeys, customAddressValues]);\n\n  return contracts;\n}\n","import { useEffect, useState } from \"react\";\nimport useOnBlock from \"./OnBlock\";\nimport usePoller from \"./Poller\";\n\nconst DEBUG = false;\n\n/*\n  ~ What it does? ~\n\n  Enables you to read values from contracts and keep track of them in the local React states\n\n  ~ How can I use? ~\n\n  const purpose = useContractReader(readContracts,\"YourContract\", \"purpose\")\n\n  ~ Features ~\n\n  - Provide readContracts by loading contracts (see more on ContractLoader.js)\n  - Specify the name of the contract, in this case it is \"YourContract\"\n  - Specify the name of the variable in the contract, in this case we keep track of \"purpose\" variable\n  - Pass an args array if the function requires\n  - Pass pollTime - if no pollTime is specified, the function will update on every new block\n*/\n\nexport default function useContractReader(contracts, contractName, functionName, args, pollTime, formatter, onChange) {\n  let adjustPollTime = 0;\n  if (pollTime) {\n    adjustPollTime = pollTime;\n  } else if (!pollTime && typeof args === \"number\") {\n    // it's okay to pass poll time as last argument without args for the call\n    adjustPollTime = args;\n  }\n\n  const [value, setValue] = useState();\n  const [tried, setTried] = useState(false);\n\n  useEffect(() => {\n    if (typeof onChange === \"function\") {\n      setTimeout(onChange.bind(this, value), 1);\n    }\n  }, [value, onChange]);\n\n  const updateValue = async () => {\n    try {\n      let newValue;\n      if (DEBUG) console.log(\"CALLING \", contractName, functionName, \"with args\", args);\n      if (args && args.length > 0) {\n        newValue = await contracts[contractName][functionName](...args);\n        setTried(true);\n        if (DEBUG)\n          console.log(\"contractName\", contractName, \"functionName\", functionName, \"args\", args, \"RESULT:\", newValue);\n      } else {\n        newValue = await contracts[contractName][functionName]();\n        setTried(true);\n      }\n      if (formatter && typeof formatter === \"function\") {\n        newValue = formatter(newValue);\n      }\n      // console.log(\"GOT VALUE\",newValue)\n      if (newValue !== value) {\n        setValue(newValue);\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  // Only pass a provider to watch on a block if we have a contract and no PollTime\n  useOnBlock(contracts && contracts[contractName] && adjustPollTime === 0 && contracts[contractName].provider, () => {\n    if (contracts && contracts[contractName] && adjustPollTime === 0) {\n      if (DEBUG) console.log(\"on-blocking!\", contractName, functionName);\n      updateValue();\n    }\n  });\n\n  // Use a poller if a pollTime is provided\n  usePoller(\n    async () => {\n      if (contracts && contracts[contractName] && adjustPollTime > 0) {\n        if (DEBUG) console.log(\"polling!\", contractName, functionName);\n        updateValue();\n      }\n    },\n    adjustPollTime,\n    contracts && contracts[contractName],\n  );\n\n  if (tried === false && contracts && contracts[contractName]) {\n    updateValue();\n  }\n\n  return value;\n}\n","import { utils } from \"ethers\";\nimport { useEffect, useState } from \"react\";\n\n// resolved if(name){} to not save \"\" into cache\n\n/*\n  ~ What it does? ~\n\n  Gets ENS name from given address and provider\n\n  ~ How can I use? ~\n\n  const ensName = useLookupAddress(mainnetProvider, address);\n\n  ~ Features ~\n\n  - Provide address and get ENS name corresponding to given address\n*/\n\nconst lookupAddress = async (provider, address) => {\n  if (address && utils.isAddress(address)) {\n    // console.log(`looking up ${address}`)\n    try {\n      // Accuracy of reverse resolution is not enforced.\n      // We then manually ensure that the reported ens name resolves to address\n      const reportedName = await provider.lookupAddress(address);\n\n      const resolvedAddress = await provider.resolveName(reportedName);\n\n      if (address && utils.getAddress(address) === utils.getAddress(resolvedAddress)) {\n        return reportedName;\n      }\n      return utils.getAddress(address);\n    } catch (e) {\n      return utils.getAddress(address);\n    }\n  }\n  return 0;\n};\n\nconst useLookupAddress = (provider, address) => {\n  const [ensName, setEnsName] = useState(address);\n  // const [ensCache, setEnsCache] = useLocalStorage('ensCache_'+address); Writing directly due to sync issues\n\n  useEffect(() => {\n    let cache = window.localStorage.getItem(\"ensCache_\" + address);\n    cache = cache && JSON.parse(cache);\n\n    if (cache && cache.timestamp > Date.now()) {\n      setEnsName(cache.name);\n    } else if (provider) {\n      lookupAddress(provider, address).then(name => {\n        if (name) {\n          setEnsName(name);\n          window.localStorage.setItem(\n            \"ensCache_\" + address,\n            JSON.stringify({\n              timestamp: Date.now() + 360000,\n              name,\n            }),\n          );\n        }\n      });\n    }\n  }, [provider, address, setEnsName]);\n\n  return ensName;\n};\n\nexport default useLookupAddress;\n","import { constants } from \"ethers\";\nimport { useEffect, useState } from \"react\";\n\n/*\n  ~ What it does? ~\n\n  Gets address from given ENS name and provider\n\n  ~ How can I use? ~\n\n  const addressFromENS = useResolveName(mainnetProvider, \"austingriffith.eth\");\n\n  ~ Features ~\n\n  - Specify mainnetProvider\n  - Provide ENS name and get address corresponding to given ENS name\n*/\n\nconst useResolveName = (provider, ensName) => {\n  const [address, setAddress] = useState(constants.AddressZero);\n\n  useEffect(() => {\n    if (provider) {\n      provider.resolveName(ensName).then(resolvedAddress => setAddress(resolvedAddress));\n    }\n  }, [provider, ensName]);\n\n  return address;\n};\n\nexport default useResolveName;\n","import { useEffect, useState } from \"react\";\n\n/*\n  ~ What it does? ~\n\n  Gets a tokenlist (see more at https://tokenlists.org/), returning the .tokens only\n\n  ~ How can I use? ~\n\n  const tokenList = useTokenList(); <- default returns the Unsiwap tokens\n  const tokenList = useTokenList(\"https://gateway.ipfs.io/ipns/tokens.uniswap.org\");\n\n  ~ Features ~\n\n  - Optional - specify chainId to filter by chainId\n*/\n\nconst useTokenList = (tokenListUri, chainId) => {\n  const [tokenList, setTokenList] = useState([]);\n\n  const _tokenListUri = tokenListUri || \"https://gateway.ipfs.io/ipns/tokens.uniswap.org\";\n\n  useEffect(() => {\n    const getTokenList = async () => {\n      if(navigator.onLine){\n        try {\n          const tokenList = await fetch(_tokenListUri);\n          const tokenListJson = await tokenList.json();\n          let _tokenList;\n\n          if (chainId) {\n            _tokenList = tokenListJson.tokens.filter(function (t) {\n              return t.chainId === chainId;\n            });\n          } else {\n            _tokenList = tokenListJson;\n          }\n\n          setTokenList(_tokenList.tokens);\n        } catch (e) {\n          console.log(e);\n        }\n      }\n    };\n    getTokenList();\n  }, [tokenListUri]);\n\n  return tokenList;\n};\n\nexport default useTokenList;\n","import { useState, useEffect } from \"react\";\n\nconst { ethers } = require(\"ethers\");\n\nexport default function useBurnerSigner(provider) {\n  const key = \"metaPrivateKey\";\n  let wallet;\n  const [signer, setSigner] = useState();\n  const [storedValue, setStoredValue] = useState();\n\n  const setValue = value => {\n    try {\n      setStoredValue(value);\n      window.localStorage.setItem(key, value);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    const storedKey = window.localStorage.getItem(key);\n    if (!storedKey) {\n      console.log(\"generating a new key\");\n      const _newWallet = ethers.Wallet.createRandom();\n      const _newKey = _newWallet.privateKey;\n      setValue(_newKey);\n    } else {\n      setValue(storedKey);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (storedValue && provider) {\n      wallet = new ethers.Wallet(storedValue);\n      const _signer = wallet.connect(provider);\n      setSigner(_signer);\n    }\n  }, [storedValue, provider]);\n\n  return signer;\n}\n","import { useMemo, useState } from \"react\";\nimport useBurnerSigner from \"./BurnerSigner\";\n\n/*\n  ~ What it does? ~\n\n  Gets user provider\n\n  ~ How can I use? ~\n\n  const userProvider = useUserProvider(injectedProvider, localProvider);\n\n  ~ Features ~\n\n  - Specify the injected provider from Metamask\n  - Specify the local provider\n  - Usage examples:\n    const tx = Transactor(userSigner, gasPrice)\n*/\n\nconst useUserSigner = (injectedProvider, localProvider) => {\n  const [signer, setSigner] = useState();\n  const burnerSigner = useBurnerSigner(localProvider);\n\n  useMemo(() => {\n    if (injectedProvider) {\n      console.log(\"🦊 Using injected provider\");\n      const injectedSigner = injectedProvider._isProvider ? injectedProvider.getSigner() : injectedProvider;\n      setSigner(injectedSigner);\n    } else if (!localProvider) setSigner();\n    else {\n      if (window.location.pathname && window.location.pathname.indexOf(\"/pk\") >= 0) {\n        const incomingPK = window.location.hash.replace(\"#\", \"\");\n        let rawPK;\n        if (incomingPK.length === 64 || incomingPK.length === 66) {\n          console.log(\"🔑 Incoming Private Key...\");\n          rawPK = incomingPK;\n          window.history.pushState({}, \"\", \"/\");\n          const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\n          if (currentPrivateKey && currentPrivateKey !== rawPK) {\n            window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\n          }\n          window.localStorage.setItem(\"metaPrivateKey\", rawPK);\n        }\n      }\n\n      console.log(\"🔥 Using burner signer\", burnerSigner);\n      setSigner(burnerSigner);\n    }\n  }, [injectedProvider, localProvider, burnerSigner]);\n\n  return signer;\n};\n\nexport default useUserSigner;\n","import { Skeleton, Typography } from \"antd\";\nimport React from \"react\";\nimport Blockies from \"react-blockies\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\nimport { useLookupAddress } from \"../hooks\";\n\n// changed value={address} to address={address}\n\n/*\n  ~ What it does? ~\n\n  Displays an address with a blockie image and option to copy address\n\n  ~ How can I use? ~\n\n  <Address\n    address={address}\n    ensProvider={mainnetProvider}\n    blockExplorer={blockExplorer}\n    fontSize={fontSize}\n  />\n\n  ~ Features ~\n\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\")\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\n  - Provide fontSize={fontSize} to change the size of address text\n*/\n\nconst { Text } = Typography;\n\nconst blockExplorerLink = (address, blockExplorer) =>\n  `${blockExplorer || \"https://etherscan.io/\"}${\"address/\"}${address}`;\n\nexport default function Address(props) {\n  const address = props.value || props.address;\n\n  const ens = useLookupAddress(props.ensProvider, address);\n\n  const { currentTheme } = useThemeSwitcher();\n\n  if (!address) {\n    return (\n      <span>\n        <Skeleton avatar paragraph={{ rows: 1 }} />\n      </span>\n    );\n  }\n\n  let displayAddress = address.substr(0, 6);\n\n  if (ens && ens.indexOf(\"0x\") < 0) {\n    displayAddress = ens;\n  } else if (props.size === \"short\") {\n    displayAddress += \"...\" + address.substr(-4);\n  } else if (props.size === \"long\") {\n    displayAddress = address;\n  }\n\n  const etherscanLink = blockExplorerLink(address, props.blockExplorer);\n  if (props.minimized) {\n    return (\n      <span style={{ verticalAlign: \"middle\" }}>\n        <a\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n          target=\"_blank\"\n          href={etherscanLink}\n          rel=\"noopener noreferrer\"\n        >\n          <Blockies seed={address.toLowerCase()} size={8} scale={2} />\n        </a>\n      </span>\n    );\n  }\n\n  let text;\n  if (props.onChange) {\n    text = (\n      <Text editable={{ onChange: props.onChange }} copyable={{ text: address }}>\n        <a\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n          target=\"_blank\"\n          href={etherscanLink}\n          rel=\"noopener noreferrer\"\n        >\n          {displayAddress}\n        </a>\n      </Text>\n    );\n  } else {\n    text = (\n      <Text copyable={{ text: address }}>\n        <a\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n          target=\"_blank\"\n          href={etherscanLink}\n          rel=\"noopener noreferrer\"\n        >\n          {displayAddress}\n        </a>\n      </Text>\n    );\n  }\n\n  return (\n    <span>\n      <span style={{ verticalAlign: \"middle\" }}>\n        <Blockies seed={address.toLowerCase()} size={8} scale={props.fontSize ? props.fontSize / 7 : 4} />\n      </span>\n      <span style={{ verticalAlign: \"middle\", paddingLeft: 5, fontSize: props.fontSize ? props.fontSize : 28 }}>\n        {text}\n      </span>\n    </span>\n  );\n}\n","import React, { useState } from \"react\";\nimport { useBalance } from \"../hooks\";\n\nconst { utils } = require(\"ethers\");\n\n/*\n  ~ What it does? ~\n\n  Displays a balance of given address in ether & dollar\n\n  ~ How can I use? ~\n\n  <Balance\n    address={address}\n    provider={mainnetProvider}\n    price={price}\n  />\n\n  ~ If you already have the balance as a bignumber ~\n  <Balance\n    balance={balance}\n    price={price}\n  />\n\n  ~ Features ~\n\n  - Provide address={address} and get balance corresponding to given address\n  - Provide provider={mainnetProvider} to access balance on mainnet or any other network (ex. localProvider)\n  - Provide price={price} of ether and get your balance converted to dollars\n*/\n\nexport default function Balance(props) {\n  const [dollarMode, setDollarMode] = useState(true);\n\n  // const [listening, setListening] = useState(false);\n\n  const balance = useBalance(props.provider, props.address);\n\n  let floatBalance = parseFloat(\"0.00\");\n\n  let usingBalance = balance;\n\n  if (typeof props.balance !== \"undefined\") {\n    usingBalance = props.balance;\n  }\n  if (typeof props.value !== \"undefined\") {\n    usingBalance = props.value;\n  }\n\n  if (usingBalance) {\n    const etherBalance = utils.formatEther(usingBalance);\n    parseFloat(etherBalance).toFixed(2);\n    floatBalance = parseFloat(etherBalance);\n  }\n\n  let displayBalance = floatBalance.toFixed(4);\n\n  const price = props.price || props.dollarMultiplier;\n\n  if (price && dollarMode) {\n    displayBalance = \"$\" + (floatBalance * price).toFixed(2);\n  }\n\n  return (\n    <span\n      style={{\n        verticalAlign: \"middle\",\n        fontSize: props.size ? props.size : 24,\n        padding: 8,\n        cursor: \"pointer\",\n      }}\n      onClick={() => {\n        setDollarMode(!dollarMode);\n      }}\n    >\n      {displayBalance}\n    </span>\n  );\n}\n","// MY INFURA_ID, SWAP IN YOURS FROM https://infura.io/dashboard/ethereum\nexport const INFURA_ID = \"460f40a260564ac4a4f4b3fffb032dad\";\n\n// MY ETHERSCAN_ID, SWAP IN YOURS FROM https://etherscan.io/myapikey\nexport const ETHERSCAN_KEY = \"PSW8C433Q667DVEX5BCRMGNAH9FSGFZ7Q8\";\n\n// BLOCKNATIVE ID FOR Notify.js:\nexport const BLOCKNATIVE_DAPPID = \"0b58206a-f3c0-4701-a62f-73c7243e8c77\";\n\nexport const NETWORKS = {\n  localhost: {\n    name: \"localhost\",\n    color: \"#666666\",\n    chainId: 31337,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + window.location.hostname + \":8545\",\n  },\n  mainnet: {\n    name: \"mainnet\",\n    color: \"#ff8b9e\",\n    chainId: 1,\n    rpcUrl: `https://mainnet.infura.io/v3/${INFURA_ID}`,\n    blockExplorer: \"https://etherscan.io/\",\n  },\n  kovan: {\n    name: \"kovan\",\n    color: \"#7003DD\",\n    chainId: 42,\n    rpcUrl: `https://kovan.infura.io/v3/${INFURA_ID}`,\n    blockExplorer: \"https://kovan.etherscan.io/\",\n    faucet: \"https://gitter.im/kovan-testnet/faucet\", // https://faucet.kovan.network/\n  },\n  rinkeby: {\n    name: \"rinkeby\",\n    color: \"#e0d068\",\n    chainId: 4,\n    rpcUrl: `https://rinkeby.infura.io/v3/${INFURA_ID}`,\n    faucet: \"https://faucet.rinkeby.io/\",\n    blockExplorer: \"https://rinkeby.etherscan.io/\",\n  },\n  ropsten: {\n    name: \"ropsten\",\n    color: \"#F60D09\",\n    chainId: 3,\n    faucet: \"https://faucet.ropsten.be/\",\n    blockExplorer: \"https://ropsten.etherscan.io/\",\n    rpcUrl: `https://ropsten.infura.io/v3/${INFURA_ID}`,\n  },\n  goerli: {\n    name: \"goerli\",\n    color: \"#0975F6\",\n    chainId: 5,\n    faucet: \"https://goerli-faucet.slock.it/\",\n    blockExplorer: \"https://goerli.etherscan.io/\",\n    rpcUrl: `https://goerli.infura.io/v3/${INFURA_ID}`,\n  },\n  xdai: {\n    name: \"xdai\",\n    color: \"#48a9a6\",\n    chainId: 100,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://dai.poa.network\",\n    faucet: \"https://xdai-faucet.top/\",\n    blockExplorer: \"https://blockscout.com/poa/xdai/\",\n  },\n  matic: {\n    name: \"matic\",\n    color: \"#2bbdf7\",\n    chainId: 137,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://rpc-mainnet.maticvigil.com\",\n    faucet: \"https://faucet.matic.network/\",\n    blockExplorer: \"https://explorer-mainnet.maticvigil.com//\",\n  },\n  mumbai: {\n    name: \"mumbai\",\n    color: \"#92D9FA\",\n    chainId: 80001,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://rpc-mumbai.maticvigil.com\",\n    faucet: \"https://faucet.matic.network/\",\n    blockExplorer: \"https://mumbai-explorer.matic.today/\",\n  },\n  localArbitrum: {\n    name: \"localArbitrum\",\n    color: \"#50a0ea\",\n    chainId: 153869338190755,\n    blockExplorer: \"\",\n    rpcUrl: `http://localhost:8547`,\n  },\n  localArbitrumL1: {\n    name: \"localArbitrumL1\",\n    color: \"#50a0ea\",\n    chainId: 44010,\n    blockExplorer: \"\",\n    rpcUrl: `http://localhost:7545`,\n  },\n  rinkebyArbitrum: {\n    name: \"Arbitrum Testnet\",\n    color: \"#50a0ea\",\n    chainId: 421611,\n    blockExplorer: \"https://rinkeby-explorer.arbitrum.io/#/\",\n    rpcUrl: `https://rinkeby.arbitrum.io/rpc`,\n  },\n  arbitrum: {\n    name: \"Arbitrum\",\n    color: \"#50a0ea\",\n    chainId: 42161,\n    blockExplorer: \"https://explorer.arbitrum.io/#/\",\n    rpcUrl: `https://arb1.arbitrum.io/rpc`,\n    gasPrice: 0,\n  },\n  localOptimismL1: {\n    name: \"localOptimismL1\",\n    color: \"#f01a37\",\n    chainId: 31337,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + window.location.hostname + \":9545\",\n  },\n  localOptimism: {\n    name: \"localOptimism\",\n    color: \"#f01a37\",\n    chainId: 420,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + window.location.hostname + \":8545\",\n    gasPrice: 0,\n  },\n  kovanOptimism: {\n    name: \"kovanOptimism\",\n    color: \"#f01a37\",\n    chainId: 69,\n    blockExplorer: \"https://kovan-optimistic.etherscan.io/\",\n    rpcUrl: `https://kovan.optimism.io`,\n    gasPrice: 0,\n  },\n  optimism: {\n    name: \"optimism\",\n    color: \"#f01a37\",\n    chainId: 10,\n    blockExplorer: \"https://optimistic.etherscan.io/\",\n    rpcUrl: `https://mainnet.optimism.io`,\n  },\n};\n\nexport const NETWORK = chainId => {\n  for (const n in NETWORKS) {\n    if (NETWORKS[n].chainId === chainId) {\n      return NETWORKS[n];\n    }\n  }\n};\n","import { notification } from \"antd\";\nimport Notify from \"bnc-notify\";\nimport { BLOCKNATIVE_DAPPID } from \"../constants\";\n\nconst { ethers } = require(\"ethers\");\n\n// this should probably just be renamed to \"notifier\"\n// it is basically just a wrapper around BlockNative's wonderful Notify.js\n// https://docs.blocknative.com/notify\nconst callbacks = {};\n\nconst DEBUG = true;\n\nexport default function Transactor(providerOrSigner, gasPrice, etherscan) {\n  if (typeof providerOrSigner !== \"undefined\") {\n    // eslint-disable-next-line consistent-return\n    return async (tx, callback) => {\n      let signer;\n      let network;\n      let provider;\n      if (ethers.Signer.isSigner(providerOrSigner) === true) {\n        provider = providerOrSigner.provider;\n        signer = providerOrSigner;\n        network = providerOrSigner.provider && (await providerOrSigner.provider.getNetwork());\n      } else if (providerOrSigner._isProvider) {\n        provider = providerOrSigner;\n        signer = providerOrSigner.getSigner();\n        network = await providerOrSigner.getNetwork();\n      }\n\n      console.log(\"network\", network);\n\n      var options = null;\n      var notify = null;\n      if(navigator.onLine){\n        options = {\n          dappId: BLOCKNATIVE_DAPPID, // GET YOUR OWN KEY AT https://account.blocknative.com\n          system: \"ethereum\",\n          networkId: network.chainId,\n          // darkMode: Boolean, // (default: false)\n          transactionHandler: txInformation => {\n            if (DEBUG) console.log(\"HANDLE TX\", txInformation);\n            const possibleFunction = callbacks[txInformation.transaction.hash];\n            if (typeof possibleFunction === \"function\") {\n              possibleFunction(txInformation.transaction);\n            }\n          },\n        };\n\n        notify = Notify(options);\n      }\n\n\n      let etherscanNetwork = \"\";\n      if (network.name && network.chainId > 1) {\n        etherscanNetwork = network.name + \".\";\n      }\n\n      let etherscanTxUrl = \"https://\" + etherscanNetwork + \"etherscan.io/tx/\";\n      if (network.chainId === 100) {\n        etherscanTxUrl = \"https://blockscout.com/poa/xdai/tx/\";\n      }\n\n      try {\n        let result;\n        if (tx instanceof Promise) {\n          if (DEBUG) console.log(\"AWAITING TX\", tx);\n          result = await tx;\n        } else {\n          if (!tx.gasPrice) {\n            tx.gasPrice = gasPrice || ethers.utils.parseUnits(\"4.1\", \"gwei\");\n          }\n          if (!tx.gasLimit) {\n            tx.gasLimit = ethers.utils.hexlify(120000);\n          }\n          if (DEBUG) console.log(\"RUNNING TX\", tx);\n          result = await signer.sendTransaction(tx);\n        }\n        if (DEBUG) console.log(\"RESULT:\", result);\n        // console.log(\"Notify\", notify);\n\n        if (callback) {\n          callbacks[result.hash] = callback;\n        }\n\n        // if it is a valid Notify.js network, use that, if not, just send a default notification\n        if (notify && [1, 3, 4, 5, 42, 100].indexOf(network.chainId) >= 0) {\n          const { emitter } = notify.hash(result.hash);\n          emitter.on(\"all\", transaction => {\n            return {\n              onclick: () => window.open((etherscan || etherscanTxUrl) + transaction.hash),\n            };\n          });\n        } else {\n          notification.info({\n            message: \"Local Transaction Sent\",\n            description: result.hash,\n            placement: \"bottomRight\",\n          });\n          // on most networks BlockNative will update a transaction handler,\n          // but locally we will set an interval to listen...\n          if (callback) {\n            const txResult = await tx;\n            const listeningInterval = setInterval(async () => {\n              console.log(\"CHECK IN ON THE TX\", txResult, provider);\n              const currentTransactionReceipt = await provider.getTransactionReceipt(txResult.hash);\n              if (currentTransactionReceipt && currentTransactionReceipt.confirmations) {\n                callback({ ...txResult, ...currentTransactionReceipt });\n                clearInterval(listeningInterval);\n              }\n            }, 500);\n          }\n        }\n\n        if (typeof result.wait === \"function\") {\n          await result.wait();\n        }\n\n        return result;\n      } catch (e) {\n        if (DEBUG) console.log(e);\n        // Accounts for Metamask and default signer on all networks\n        let message = e.data && e.data.message ? e.data.message : e.error && JSON.parse(JSON.stringify(e.error)).body ? JSON.parse(JSON.parse(JSON.stringify(e.error)).body).error.message : e.data ? e.data : JSON.stringify(e);\n        if(!e.error && e.message){\n          message = e.message\n        }\n\n        console.log(\"Attempt to clean up:\", message);\n        try{\n          let obj = JSON.parse(message)\n          if(obj && obj.body){\n            let errorObj = JSON.parse(obj.body)\n            if(errorObj && errorObj.error && errorObj.error.message){\n              message = errorObj.error.message\n            }\n          }\n        }catch(e){\n          //ignore\n        }\n\n        notification.error({\n          message: \"Transaction Error\",\n          description: message,\n        });\n        if (callback && typeof callback === \"function\") {\n          callback(e);\n        }\n      }\n    };\n  }\n}\n","import { NFTStorage, File } from 'nft.storage';\n\nconst nftStorageApiKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkaWQ6ZXRocjoweDQzYjgwMzQ4MzY1MWE4MDE5MjU5NzQ2MjY5ZjM1ZDI4NUMzMEJlQjkiLCJpc3MiOiJuZnQtc3RvcmFnZSIsImlhdCI6MTYyODE1NzYxNTc3NCwibmFtZSI6ImtleTEifQ.G9BNydhDBxYJqYr06xSW-hRbkj5AptqaijFokHPx3h0';\nconst nftsClient = new NFTStorage({ token: nftStorageApiKey })\n\nexport default async function StoreFileOnIPFS(name, description, imgFile, srcFile) {\n    const reader = new FileReader();\n    try {\n        const metadata = await nftsClient.store({\n            name,\n            description,\n            image: imgFile ?? new File(['<DATA>'], 'notansi.jpg', { type: 'image/jpg' }), // unable to upload non-image file. We could load ansi, capture image and then set it as this field.\n            properties: {\n                srcData: reader.readAsText(srcFile, 'ISO-8859-1'),\n                srcFile: srcFile,\n            }\n        });\n\n        console.log('IPFS URL for the metadata:', metadata.url)\n        console.log('metadata.json contents:\\n', metadata.data)\n        console.log('metadata.json with IPFS gateway URLs:\\n', metadata.embed());\n        return metadata;\n    }\n    catch (ex) {\n        console.error(ex);\n        return ex;\n    }\n}\n","import React from \"react\";\nimport Blockies from \"react-blockies\";\n\n// provides a blockie image for the address using \"react-blockies\" library\n\nexport default function Blockie(props) {\n  if (!props.address || typeof props.address.toLowerCase !== \"function\") {\n    return <span />;\n  }\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return <Blockies seed={props.address.toLowerCase()} {...props} />;\n}\n","import { CameraOutlined, QrcodeOutlined } from \"@ant-design/icons\";\nimport { Badge, Input } from \"antd\";\nimport { useLookupAddress } from \"eth-hooks\";\nimport React, { useCallback, useState } from \"react\";\nimport QrReader from \"react-qr-reader\";\nimport Blockie from \"./Blockie\";\n\n// probably we need to change value={toAddress} to address={toAddress}\n\n/*\n  ~ What it does? ~\n\n  Displays an address input with QR scan option\n\n  ~ How can I use? ~\n\n  <AddressInput\n    autoFocus\n    ensProvider={mainnetProvider}\n    placeholder=\"Enter address\"\n    value={toAddress}\n    onChange={setToAddress}\n  />\n\n  ~ Features ~\n\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n  - Provide placeholder=\"Enter address\" value for the input\n  - Value of the address input is stored in value={toAddress}\n  - Control input change by onChange={setToAddress}\n                          or onChange={address => { setToAddress(address);}}\n*/\n\nexport default function AddressInput(props) {\n  const [value, setValue] = useState(props.value);\n  const [scan, setScan] = useState(false);\n\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n  const ens = useLookupAddress(props.ensProvider, currentValue);\n\n  const scannerButton = (\n    <div\n      style={{ marginTop: 4, cursor: \"pointer\" }}\n      onClick={() => {\n        setScan(!scan);\n      }}\n    >\n      <Badge count={<CameraOutlined style={{ fontSize: 9 }} />}>\n        <QrcodeOutlined style={{ fontSize: 18 }} />\n      </Badge>{\" \"}\n      Scan\n    </div>\n  );\n\n  const { ensProvider, onChange } = props;\n  const updateAddress = useCallback(\n    async newValue => {\n      if (typeof newValue !== \"undefined\") {\n        let address = newValue;\n        if (address.indexOf(\".eth\") > 0 || address.indexOf(\".xyz\") > 0) {\n          try {\n            const possibleAddress = await ensProvider.resolveName(address);\n            if (possibleAddress) {\n              address = possibleAddress;\n            }\n            // eslint-disable-next-line no-empty\n          } catch (e) {}\n        }\n        setValue(address);\n        if (typeof onChange === \"function\") {\n          onChange(address);\n        }\n      }\n    },\n    [ensProvider, onChange],\n  );\n\n  const scanner = scan ? (\n    <div\n      style={{\n        zIndex: 256,\n        position: \"absolute\",\n        left: 0,\n        top: 0,\n        width: \"100%\",\n      }}\n      onClick={() => {\n        setScan(false);\n      }}\n    >\n      <QrReader\n        delay={250}\n        resolution={1200}\n        onError={e => {\n          console.log(\"SCAN ERROR\", e);\n          setScan(false);\n        }}\n        onScan={newValue => {\n          if (newValue) {\n            console.log(\"SCAN VALUE\", newValue);\n            let possibleNewValue = newValue;\n            if (possibleNewValue.indexOf(\"/\") >= 0) {\n              possibleNewValue = possibleNewValue.substr(possibleNewValue.lastIndexOf(\"0x\"));\n              console.log(\"CLEANED VALUE\", possibleNewValue);\n            }\n            setScan(false);\n            updateAddress(possibleNewValue);\n          }\n        }}\n        style={{ width: \"100%\" }}\n      />\n    </div>\n  ) : (\n    \"\"\n  );\n\n  return (\n    <div>\n      {scanner}\n      <Input\n        id=\"0xAddress\" // name it something other than address for auto fill doxxing\n        name=\"0xAddress\" // name it something other than address for auto fill doxxing\n        autoComplete=\"off\"\n        autoFocus={props.autoFocus}\n        placeholder={props.placeholder ? props.placeholder : \"address\"}\n        prefix={<Blockie address={currentValue} size={8} scale={3} />}\n        value={ens || currentValue}\n        addonAfter={scannerButton}\n        onChange={e => {\n          updateAddress(e.target.value);\n        }}\n      />\n    </div>\n  );\n}\n","import { Input } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\n\n// small change in useEffect, display currentValue if it's provided by user\n\n/*\n  ~ What it does? ~\n\n  Displays input field for ETH/USD amount, with an option to convert between ETH and USD\n\n  ~ How can I use? ~\n\n  <EtherInput\n    autofocus\n    price={price}\n    value=100\n    placeholder=\"Enter amount\"\n    onChange={value => {\n      setAmount(value);\n    }}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and easily convert between USD and ETH\n  - Provide value={value} to specify initial amount of ether\n  - Provide placeholder=\"Enter amount\" value for the input\n  - Control input change by onChange={value => { setAmount(value);}}\n*/\n\nexport default function EtherInput(props) {\n  const [mode, setMode] = useState(props.price ? \"USD\" : \"ETH\");\n  const [display, setDisplay] = useState();\n  const [value, setValue] = useState();\n\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n\n  const option = title => {\n    if (!props.price) return \"\";\n    return (\n      <div\n        style={{ cursor: \"pointer\" }}\n        onClick={() => {\n          if (mode === \"USD\") {\n            setMode(\"ETH\");\n            setDisplay(currentValue);\n          } else {\n            setMode(\"USD\");\n            if (currentValue) {\n              const usdValue = \"\" + (parseFloat(currentValue) * props.price).toFixed(2);\n              setDisplay(usdValue);\n            } else {\n              setDisplay(currentValue);\n            }\n          }\n        }}\n      >\n        {title}\n      </div>\n    );\n  };\n\n  let prefix;\n  let addonAfter;\n  if (mode === \"USD\") {\n    prefix = \"$\";\n    addonAfter = option(\"USD 🔀\");\n  } else {\n    prefix = \"Ξ\";\n    addonAfter = option(\"ETH 🔀\");\n  }\n\n  useEffect(() => {\n    if (!currentValue) {\n      setDisplay(\"\");\n    }\n  }, [currentValue]);\n\n  return (\n    <Input\n      placeholder={props.placeholder ? props.placeholder : \"amount in \" + mode}\n      autoFocus={props.autoFocus}\n      prefix={prefix}\n      value={display}\n      addonAfter={addonAfter}\n      onChange={async e => {\n        const newValue = e.target.value;\n        if (mode === \"USD\") {\n          const possibleNewValue = parseFloat(newValue);\n          if (possibleNewValue) {\n            const ethValue = possibleNewValue / props.price;\n            setValue(ethValue);\n            if (typeof props.onChange === \"function\") {\n              props.onChange(ethValue);\n            }\n            setDisplay(newValue);\n          } else {\n            setDisplay(newValue);\n          }\n        } else {\n          setValue(newValue);\n          if (typeof props.onChange === \"function\") {\n            props.onChange(newValue);\n          }\n          setDisplay(newValue);\n        }\n      }}\n    />\n  );\n}\n","import { KeyOutlined, QrcodeOutlined, SendOutlined, WalletOutlined } from \"@ant-design/icons\";\nimport { Button, Modal, Spin, Tooltip, Typography } from \"antd\";\nimport { ethers } from \"ethers\";\nimport QR from \"qrcode.react\";\nimport React, { useState, useEffect } from \"react\";\nimport { Transactor } from \"../helpers\";\nimport Address from \"./Address\";\nimport AddressInput from \"./AddressInput\";\nimport Balance from \"./Balance\";\nimport EtherInput from \"./EtherInput\";\n\nconst { Text, Paragraph } = Typography;\n\n/*\n  ~ What it does? ~\n\n  Displays a wallet where you can specify address and send USD/ETH, with options to\n  scan address, to convert between USD and ETH, to see and generate private keys,\n  to send, receive and extract the burner wallet\n\n  ~ How can I use? ~\n\n  <Wallet\n    provider={userProvider}\n    address={address}\n    ensProvider={mainnetProvider}\n    price={price}\n    color='red'\n  />\n\n  ~ Features ~\n\n  - Provide provider={userProvider} to display a wallet\n  - Provide address={address} if you want to specify address, otherwise\n                                                    your default address will be used\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n  - Provide price={price} of ether and easily convert between USD and ETH\n  - Provide color to specify the color of wallet icon\n*/\n\nexport default function Wallet(props) {\n  const [signerAddress, setSignerAddress] = useState();\n  useEffect(() => {\n    async function getAddress() {\n      if (props.signer) {\n        const newAddress = await props.signer.getAddress();\n        setSignerAddress(newAddress);\n      }\n    }\n    getAddress();\n  }, [props.signer]);\n\n  const selectedAddress = props.address || signerAddress;\n\n  const [open, setOpen] = useState();\n  const [qr, setQr] = useState();\n  const [amount, setAmount] = useState();\n  const [toAddress, setToAddress] = useState();\n  const [pk, setPK] = useState();\n\n  const providerSend = props.provider ? (\n    <Tooltip title=\"Wallet\">\n      <WalletOutlined\n        onClick={() => {\n          setOpen(!open);\n        }}\n        rotate={-90}\n        style={{\n          padding: 7,\n          color: props.color ? props.color : \"\",\n          cursor: \"pointer\",\n          fontSize: 28,\n          verticalAlign: \"middle\",\n        }}\n      />\n    </Tooltip>\n  ) : (\n    \"\"\n  );\n\n  let display;\n  let receiveButton;\n  let privateKeyButton;\n  if (qr) {\n    display = (\n      <div>\n        <div>\n          <Text copyable>{selectedAddress}</Text>\n        </div>\n        <QR\n          value={selectedAddress}\n          size=\"450\"\n          level=\"H\"\n          includeMargin\n          renderAs=\"svg\"\n          imageSettings={{ excavate: false }}\n        />\n      </div>\n    );\n    receiveButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setQr(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Hide\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(selectedAddress);\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Private Key\n      </Button>\n    );\n  } else if (pk) {\n    const pk = localStorage.getItem(\"metaPrivateKey\");\n    const wallet = new ethers.Wallet(pk);\n\n    if (wallet.address !== selectedAddress) {\n      display = (\n        <div>\n          <b>*injected account*, private key unknown</b>\n        </div>\n      );\n    } else {\n      const extraPkDisplayAdded = {};\n      const extraPkDisplay = [];\n      extraPkDisplayAdded[wallet.address] = true;\n      extraPkDisplay.push(\n        <div style={{ fontSize: 16, padding: 2, backgroundStyle: \"#89e789\" }}>\n          <a href={\"/pk#\" + pk}>\n            <Address minimized address={wallet.address} ensProvider={props.ensProvider} /> {wallet.address.substr(0, 6)}\n          </a>\n        </div>,\n      );\n      for (const key in localStorage) {\n        if (key.indexOf(\"metaPrivateKey_backup\") >= 0) {\n          console.log(key);\n          const pastpk = localStorage.getItem(key);\n          const pastwallet = new ethers.Wallet(pastpk);\n          if (!extraPkDisplayAdded[pastwallet.address] /* && selectedAddress!=pastwallet.address */) {\n            extraPkDisplayAdded[pastwallet.address] = true;\n            extraPkDisplay.push(\n              <div style={{ fontSize: 16 }}>\n                <a href={\"/pk#\" + pastpk}>\n                  <Address minimized address={pastwallet.address} ensProvider={props.ensProvider} />{\" \"}\n                  {pastwallet.address.substr(0, 6)}\n                </a>\n              </div>,\n            );\n          }\n        }\n      }\n\n      display = (\n        <div>\n          <b>Private Key:</b>\n\n          <div>\n            <Text copyable>{pk}</Text>\n          </div>\n\n          <hr />\n\n          <i>\n            Point your camera phone at qr code to open in\n            <a target=\"_blank\" href={\"https://xdai.io/\" + pk} rel=\"noopener noreferrer\">\n              burner wallet\n            </a>\n            :\n          </i>\n          <QR\n            value={\"https://xdai.io/\" + pk}\n            size=\"450\"\n            level=\"H\"\n            includeMargin\n            renderAs=\"svg\"\n            imageSettings={{ excavate: false }}\n          />\n\n          <Paragraph style={{ fontSize: \"16\" }} copyable>\n            {\"https://xdai.io/\" + pk}\n          </Paragraph>\n\n          {extraPkDisplay ? (\n            <div>\n              <h3>Known Private Keys:</h3>\n              {extraPkDisplay}\n              <Button\n                onClick={() => {\n                  const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\n                  if (currentPrivateKey) {\n                    window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\n                  }\n                  const randomWallet = ethers.Wallet.createRandom();\n                  const privateKey = randomWallet._signingKey().privateKey;\n                  window.localStorage.setItem(\"metaPrivateKey\", privateKey);\n                  window.location.reload();\n                }}\n              >\n                Generate\n              </Button>\n            </div>\n          ) : (\n            \"\"\n          )}\n        </div>\n      );\n    }\n\n    receiveButton = (\n      <Button\n        key=\"receive\"\n        onClick={() => {\n          setQr(selectedAddress);\n          setPK(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Receive\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(\"\");\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Hide\n      </Button>\n    );\n  } else {\n    const inputStyle = {\n      padding: 10,\n    };\n\n    display = (\n      <div>\n        <div style={inputStyle}>\n          <AddressInput\n            autoFocus\n            ensProvider={props.ensProvider}\n            placeholder=\"to address\"\n            address={toAddress}\n            onChange={setToAddress}\n          />\n        </div>\n        <div style={inputStyle}>\n          <EtherInput\n            price={props.price}\n            value={amount}\n            onChange={value => {\n              setAmount(value);\n            }}\n          />\n        </div>\n      </div>\n    );\n    receiveButton = (\n      <Button\n        key=\"receive\"\n        onClick={() => {\n          setQr(selectedAddress);\n          setPK(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Receive\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(selectedAddress);\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Private Key\n      </Button>\n    );\n  }\n\n  return (\n    <span>\n      {providerSend}\n      <Modal\n        visible={open}\n        title={\n          <div>\n            {selectedAddress ? <Address address={selectedAddress} ensProvider={props.ensProvider} /> : <Spin />}\n            <div style={{ float: \"right\", paddingRight: 25 }}>\n              <Balance address={selectedAddress} provider={props.provider} dollarMultiplier={props.price} />\n            </div>\n          </div>\n        }\n        onOk={() => {\n          setQr();\n          setPK();\n          setOpen(!open);\n        }}\n        onCancel={() => {\n          setQr();\n          setPK();\n          setOpen(!open);\n        }}\n        footer={[\n          privateKeyButton,\n          receiveButton,\n          <Button\n            key=\"submit\"\n            type=\"primary\"\n            disabled={!amount || !toAddress || qr}\n            loading={false}\n            onClick={() => {\n              const tx = Transactor(props.provider);\n\n              let value;\n              try {\n                value = ethers.utils.parseEther(\"\" + amount);\n              } catch (e) {\n                // failed to parseEther, try something else\n                value = ethers.utils.parseEther(\"\" + parseFloat(amount).toFixed(8));\n              }\n\n              tx({\n                to: toAddress,\n                value,\n              });\n              setOpen(!open);\n              setQr();\n            }}\n          >\n            <SendOutlined /> Send\n          </Button>,\n        ]}\n      >\n        {display}\n      </Modal>\n    </span>\n  );\n}\n","import { Button } from \"antd\";\nimport React from \"react\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\nimport Address from \"./Address\";\nimport Balance from \"./Balance\";\nimport Wallet from \"./Wallet\";\n\n/*\n  ~ What it does? ~\n\n  Displays an Address, Balance, and Wallet as one Account component,\n  also allows users to log in to existing accounts and log out\n\n  ~ How can I use? ~\n\n  <Account\n    address={address}\n    localProvider={localProvider}\n    userProvider={userProvider}\n    mainnetProvider={mainnetProvider}\n    price={price}\n    web3Modal={web3Modal}\n    loadWeb3Modal={loadWeb3Modal}\n    logoutOfWeb3Modal={logoutOfWeb3Modal}\n    blockExplorer={blockExplorer}\n  />\n\n  ~ Features ~\n\n  - Provide address={address} and get balance corresponding to the given address\n  - Provide localProvider={localProvider} to access balance on local network\n  - Provide userProvider={userProvider} to display a wallet\n  - Provide mainnetProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\")\n  - Provide price={price} of ether and get your balance converted to dollars\n  - Provide web3Modal={web3Modal}, loadWeb3Modal={loadWeb3Modal}, logoutOfWeb3Modal={logoutOfWeb3Modal}\n              to be able to log in/log out to/from existing accounts\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\n*/\n\nexport default function Account({\n  address,\n  userSigner,\n  localProvider,\n  mainnetProvider,\n  price,\n  minimized,\n  web3Modal,\n  loadWeb3Modal,\n  logoutOfWeb3Modal,\n  blockExplorer,\n}) {\n  const modalButtons = [];\n  if (web3Modal) {\n    if (web3Modal.cachedProvider) {\n      modalButtons.push(\n        <Button\n          key=\"logoutbutton\"\n          style={{ verticalAlign: \"top\", marginLeft: 8, marginTop: 4 }}\n          shape=\"round\"\n          size=\"large\"\n          onClick={logoutOfWeb3Modal}\n        >\n          logout\n        </Button>,\n      );\n    } else {\n      modalButtons.push(\n        <Button\n          key=\"loginbutton\"\n          style={{ verticalAlign: \"top\", marginLeft: 8, marginTop: 4 }}\n          shape=\"round\"\n          size=\"large\"\n          /* type={minimized ? \"default\" : \"primary\"}     too many people just defaulting to MM and having a bad time */\n          onClick={loadWeb3Modal}\n        >\n          <img src=\"/connect-metamask-color.png\" style={{width: 100}} />\n        </Button>,\n      );\n    }\n  }\n\n  const { currentTheme } = useThemeSwitcher();\n\n  const display = minimized ? (\n    \"\"\n  ) : (\n    <span>\n      {address ? (\n        <Address address={address} ensProvider={mainnetProvider} blockExplorer={blockExplorer} />\n      ) : (\n        \"Connecting...\"\n      )}\n      <Balance address={address} provider={localProvider} price={price} />\n      <Wallet\n        address={address}\n        provider={localProvider}\n        signer={userSigner}\n        ensProvider={mainnetProvider}\n        price={price}\n        color={currentTheme === \"light\" ? \"#1890ff\" : \"#2caad9\"}\n      />\n    </span>\n  );\n\n  return (\n    <div>\n      {display}\n      {modalButtons}\n    </div>\n  );\n}\n","import { Input } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\n\nconst { utils, constants } = require(\"ethers\");\n\n/*\n  ~ What it does? ~\n\n  Displays input field with options to convert between STRING and BYTES32\n\n  ~ How can I use? ~\n\n  <BytesStringInput\n    autofocus\n    value={\"scaffold-eth\"}\n    placeholder=\"Enter value...\"\n    onChange={value => {\n      setValue(value);\n    }}\n  />\n\n  ~ Features ~\n\n  - Provide value={value} to specify initial string\n  - Provide placeholder=\"Enter value...\" value for the input\n  - Control input change by onChange={value => { setValue(value);}}\n\n*/\n\nexport default function BytesStringInput(props) {\n  const [mode, setMode] = useState(\"STRING\");\n  const [display, setDisplay] = useState();\n  const [value, setValue] = useState(constants.HashZero);\n\n  // current value is the value in bytes32\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n\n  const option = title => {\n    return (\n      <div\n        style={{ cursor: \"pointer\" }}\n        onClick={() => {\n          if (mode === \"STRING\") {\n            setMode(\"BYTES32\");\n            if (!utils.isHexString(currentValue)) {\n              /* in case user enters invalid bytes32 number,\n                   it considers it as string and converts to bytes32 */\n              const changedValue = utils.formatBytes32String(currentValue);\n              setDisplay(changedValue);\n            } else {\n              setDisplay(currentValue);\n            }\n          } else {\n            setMode(\"STRING\");\n            if (currentValue && utils.isHexString(currentValue)) {\n              setDisplay(utils.parseBytes32String(currentValue));\n            } else {\n              setDisplay(currentValue);\n            }\n          }\n        }}\n      >\n        {title}\n      </div>\n    );\n  };\n\n  let addonAfter;\n  if (mode === \"STRING\") {\n    addonAfter = option(\"STRING 🔀\");\n  } else {\n    addonAfter = option(\"BYTES32 🔀\");\n  }\n\n  useEffect(() => {\n    if (!currentValue) {\n      setDisplay(\"\");\n    }\n  }, [currentValue]);\n\n  return (\n    <Input\n      placeholder={props.placeholder ? props.placeholder : \"Enter value in \" + mode}\n      autoFocus={props.autoFocus}\n      value={display}\n      addonAfter={addonAfter}\n      onChange={async e => {\n        const newValue = e.target.value;\n        if (mode === \"STRING\") {\n          // const ethValue = parseFloat(newValue) / props.price;\n          // setValue(ethValue);\n          if (typeof props.onChange === \"function\") {\n            props.onChange(utils.formatBytes32String(newValue));\n          }\n          setValue(utils.formatBytes32String(newValue));\n          setDisplay(newValue);\n        } else {\n          if (typeof props.onChange === \"function\") {\n            props.onChange(newValue);\n          }\n          setValue(newValue);\n          setDisplay(newValue);\n        }\n      }}\n    />\n  );\n}\n","import React from \"react\";\nimport { Address } from \"..\";\nconst { utils } = require(\"ethers\");\n\nconst tryToDisplay = thing => {\n  if (thing && thing.toNumber) {\n    try {\n      return thing.toNumber();\n    } catch (e) {\n      return \"Ξ\" + utils.formatUnits(thing, \"ether\");\n    }\n  }\n  if (thing && thing.indexOf && thing.indexOf(\"0x\") === 0 && thing.length === 42) {\n    return <Address address={thing} fontSize={22} />;\n  }\n  return JSON.stringify(thing);\n};\n\nexport default tryToDisplay;\n","import { Col, Divider, Row } from \"antd\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport tryToDisplay from \"./utils\";\n\nconst DisplayVariable = ({ contractFunction, functionInfo, refreshRequired, triggerRefresh }) => {\n  const [variable, setVariable] = useState(\"\");\n\n  const refresh = useCallback(async () => {\n    try {\n      const funcResponse = await contractFunction();\n      setVariable(funcResponse);\n      triggerRefresh(false);\n    } catch (e) {\n      console.log(e);\n    }\n  }, [setVariable, contractFunction, triggerRefresh]);\n\n  useEffect(() => {\n    refresh();\n  }, [refresh, refreshRequired, contractFunction]);\n\n  return (\n    <div>\n      <Row>\n        <Col\n          span={8}\n          style={{\n            textAlign: \"right\",\n            opacity: 0.333,\n            paddingRight: 6,\n            fontSize: 24,\n          }}\n        >\n          {functionInfo.name}\n        </Col>\n        <Col span={14}>\n          <h2>{tryToDisplay(variable)}</h2>\n        </Col>\n        <Col span={2}>\n          <h2>\n            <a href=\"#\" onClick={refresh}>\n              🔄\n            </a>\n          </h2>\n        </Col>\n      </Row>\n      <Divider />\n    </div>\n  );\n};\n\nexport default DisplayVariable;\n","import { Button, Col, Divider, Input, Row, Tooltip } from \"antd\";\nimport React, { useState } from \"react\";\nimport Blockies from \"react-blockies\";\nimport { Transactor } from \"../../helpers\";\nimport tryToDisplay from \"./utils\";\n\nconst { utils, BigNumber } = require(\"ethers\");\n\nexport default function FunctionForm({ contractFunction, functionInfo, provider, gasPrice, triggerRefresh }) {\n  const [form, setForm] = useState({});\n  const [txValue, setTxValue] = useState();\n  const [returnValue, setReturnValue] = useState();\n\n  const tx = Transactor(provider, gasPrice);\n\n  let inputIndex = 0;\n  const inputs = functionInfo.inputs.map(input => {\n    const key = functionInfo.name + \"_\" + input.name + \"_\" + input.type + \"_\" + inputIndex++;\n\n    let buttons = \"\";\n    if (input.type === \"bytes32\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"to bytes32\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              if (utils.isHexString(form[key])) {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.parseBytes32String(form[key]);\n                setForm(formUpdate);\n              } else {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.formatBytes32String(form[key]);\n                setForm(formUpdate);\n              }\n            }}\n          >\n            #️⃣\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"bytes\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"to hex\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              if (utils.isHexString(form[key])) {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.toUtf8String(form[key]);\n                setForm(formUpdate);\n              } else {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.hexlify(utils.toUtf8Bytes(form[key]));\n                setForm(formUpdate);\n              }\n            }}\n          >\n            #️⃣\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"uint256\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"* 10 ** 18\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              const formUpdate = { ...form };\n              formUpdate[key] = utils.parseEther(form[key]);\n              setForm(formUpdate);\n            }}\n          >\n            ✴️\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"address\") {\n      const possibleAddress = form[key] && form[key].toLowerCase && form[key].toLowerCase().trim();\n      if (possibleAddress && possibleAddress.length === 42) {\n        buttons = (\n          <Tooltip placement=\"right\" title=\"blockie\">\n            <Blockies seed={possibleAddress} scale={3} />\n          </Tooltip>\n        );\n      }\n    }\n\n    return (\n      <div style={{ margin: 2 }} key={key}>\n        <Input\n          size=\"large\"\n          placeholder={input.name ? input.type + \" \" + input.name : input.type}\n          autoComplete=\"off\"\n          value={form[key]}\n          name={key}\n          onChange={event => {\n            const formUpdate = { ...form };\n            formUpdate[event.target.name] = event.target.value;\n            setForm(formUpdate);\n          }}\n          suffix={buttons}\n        />\n      </div>\n    );\n  });\n\n  const txValueInput = (\n    <div style={{ margin: 2 }} key=\"txValueInput\">\n      <Input\n        placeholder=\"transaction value\"\n        onChange={e => setTxValue(e.target.value)}\n        value={txValue}\n        addonAfter={\n          <div>\n            <Row>\n              <Col span={16}>\n                <Tooltip placement=\"right\" title=\" * 10^18 \">\n                  <div\n                    type=\"dashed\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={async () => {\n                      const floatValue = parseFloat(txValue);\n                      if (floatValue) setTxValue(\"\" + floatValue * 10 ** 18);\n                    }}\n                  >\n                    ✳️\n                  </div>\n                </Tooltip>\n              </Col>\n              <Col span={16}>\n                <Tooltip placement=\"right\" title=\"number to hex\">\n                  <div\n                    type=\"dashed\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={async () => {\n                      setTxValue(BigNumber.from(txValue).toHexString());\n                    }}\n                  >\n                    #️⃣\n                  </div>\n                </Tooltip>\n              </Col>\n            </Row>\n          </div>\n        }\n      />\n    </div>\n  );\n\n  if (functionInfo.payable) {\n    inputs.push(txValueInput);\n  }\n\n  const buttonIcon =\n    functionInfo.type === \"call\" ? (\n      <Button style={{ marginLeft: -32 }}>Read📡</Button>\n    ) : (\n      <Button style={{ marginLeft: -32 }}>Send💸</Button>\n    );\n  inputs.push(\n    <div style={{ cursor: \"pointer\", margin: 2 }} key=\"goButton\">\n      <Input\n        onChange={e => setReturnValue(e.target.value)}\n        defaultValue=\"\"\n        bordered={false}\n        disabled\n        value={returnValue}\n        suffix={\n          <div\n            style={{ width: 50, height: 30, margin: 0 }}\n            type=\"default\"\n            onClick={async () => {\n              let innerIndex = 0;\n              const args = functionInfo.inputs.map(input => {\n                const key = functionInfo.name + \"_\" + input.name + \"_\" + input.type + \"_\" + innerIndex++;\n                let value = form[key];\n                if (input.baseType === \"array\") {\n                  value = JSON.parse(value);\n                } else if (input.type === \"bool\") {\n                  if (value === \"true\" || value === \"1\" || value === \"0x1\" || value === \"0x01\" || value === \"0x0001\") {\n                    value = 1;\n                  } else {\n                    value = 0;\n                  }\n                }\n                return value;\n              });\n\n              let result;\n              if (functionInfo.stateMutability === \"view\" || functionInfo.stateMutability === \"pure\") {\n                const returned = await contractFunction(...args);\n                result = tryToDisplay(returned);\n              } else {\n                const overrides = {};\n                if (txValue) {\n                  overrides.value = txValue; // ethers.utils.parseEther()\n                }\n                if (gasPrice) {\n                  overrides.gasPrice = gasPrice;\n                }\n                // Uncomment this if you want to skip the gas estimation for each transaction\n                // overrides.gasLimit = hexlify(1200000);\n\n                // console.log(\"Running with extras\",extras)\n                const returned = await tx(contractFunction(...args, overrides));\n                result = tryToDisplay(returned);\n              }\n\n              console.log(\"SETTING RESULT:\", result);\n              setReturnValue(result);\n              triggerRefresh(true);\n            }}\n          >\n            {buttonIcon}\n          </div>\n        }\n      />\n    </div>,\n  );\n\n  return (\n    <div>\n      <Row>\n        <Col\n          span={8}\n          style={{\n            textAlign: \"right\",\n            opacity: 0.333,\n            paddingRight: 6,\n            fontSize: 24,\n          }}\n        >\n          {functionInfo.name}\n        </Col>\n        <Col span={16}>{inputs}</Col>\n      </Row>\n      <Divider />\n    </div>\n  );\n}\n","import { Card } from \"antd\";\nimport React, { useMemo, useState } from \"react\";\nimport { useContractExistsAtAddress, useContractLoader } from \"../../hooks\";\nimport Account from \"../Account\";\nimport DisplayVariable from \"./DisplayVariable\";\nimport FunctionForm from \"./FunctionForm\";\n\nconst noContractDisplay = (\n  <div>\n    Loading...{\" \"}\n    <div style={{ padding: 32 }}>\n      You need to run{\" \"}\n      <span\n        className=\"highlight\"\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n      >\n        yarn run chain\n      </span>{\" \"}\n      and{\" \"}\n      <span\n        className=\"highlight\"\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n      >\n        yarn run deploy\n      </span>{\" \"}\n      to see your contract here.\n    </div>\n    <div style={{ padding: 32 }}>\n      <span style={{ marginRight: 4 }} role=\"img\" aria-label=\"warning\">\n        ☢️\n      </span>\n      Warning: You might need to run\n      <span\n        className=\"highlight\"\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n      >\n        yarn run deploy\n      </span>{\" \"}\n      <i>again</i> after the frontend comes up!\n    </div>\n  </div>\n);\n\nconst isQueryable = fn => (fn.stateMutability === \"view\" || fn.stateMutability === \"pure\") && fn.inputs.length === 0;\n\nexport default function Contract({\n  customContract,\n  account,\n  gasPrice,\n  signer,\n  provider,\n  name,\n  show,\n  price,\n  blockExplorer,\n  chainId,\n}) {\n  const contracts = useContractLoader(provider, { chainId });\n  let contract;\n  if (!customContract) {\n    contract = contracts ? contracts[name] : \"\";\n  } else {\n    contract = customContract;\n  }\n\n  const address = contract ? contract.address : \"\";\n  const contractIsDeployed = useContractExistsAtAddress(provider, address);\n\n  const displayedContractFunctions = useMemo(\n    () =>\n      contract\n        ? Object.values(contract.interface.functions).filter(\n            fn => fn.type === \"function\" && !(show && show.indexOf(fn.name) < 0),\n          )\n        : [],\n    [contract, show],\n  );\n\n  const [refreshRequired, triggerRefresh] = useState(false);\n  const contractDisplay = displayedContractFunctions.map(fn => {\n    if (isQueryable(fn)) {\n      // If there are no inputs, just display return value\n      return (\n        <DisplayVariable\n          key={fn.name}\n          contractFunction={contract[fn.name]}\n          functionInfo={fn}\n          refreshRequired={refreshRequired}\n          triggerRefresh={triggerRefresh}\n        />\n      );\n    }\n    // If there are inputs, display a form to allow users to provide these\n    return (\n      <FunctionForm\n        key={\"FF\" + fn.name}\n        contractFunction={\n          fn.stateMutability === \"view\" || fn.stateMutability === \"pure\"\n            ? contract[fn.name]\n            : contract.connect(signer)[fn.name]\n        }\n        functionInfo={fn}\n        provider={provider}\n        gasPrice={gasPrice}\n        triggerRefresh={triggerRefresh}\n      />\n    );\n  });\n\n  return (\n    <div style={{ margin: \"auto\", width: \"70vw\" }}>\n      <Card\n        title={\n          <div>\n            {name}\n            <div style={{ float: \"right\" }}>\n              <Account\n                address={address}\n                localProvider={provider}\n                injectedProvider={provider}\n                mainnetProvider={provider}\n                price={price}\n                blockExplorer={blockExplorer}\n              />\n              {account}\n            </div>\n          </div>\n        }\n        size=\"large\"\n        style={{ marginTop: 25, width: \"100%\" }}\n        loading={contractDisplay && contractDisplay.length <= 0}\n      >\n        {contractIsDeployed ? contractDisplay : noContractDisplay}\n      </Card>\n    </div>\n  );\n}\n","import { SendOutlined } from \"@ant-design/icons\";\nimport { Button, Input, Tooltip } from \"antd\";\nimport { useLookupAddress } from \"eth-hooks\";\nimport React, { useCallback, useState, useEffect } from \"react\";\nimport Blockies from \"react-blockies\";\nimport { Transactor } from \"../helpers\";\nimport Wallet from \"./Wallet\";\n\nconst { utils } = require(\"ethers\");\n\n// improved a bit by converting address to ens if it exists\n// added option to directly input ens name\n// added placeholder option\n\n/*\n  ~ What it does? ~\n\n  Displays a local faucet to send ETH to given address, also wallet is provided\n\n  ~ How can I use? ~\n\n  <Faucet\n    price={price}\n    localProvider={localProvider}\n    ensProvider={mainnetProvider}\n    placeholder={\"Send local faucet\"}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and convert between USD and ETH in a wallet\n  - Provide localProvider={localProvider} to be able to send ETH to given address\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n              works both in input field & wallet\n  - Provide placeholder=\"Send local faucet\" value for the input\n*/\n\nexport default function Faucet(props) {\n  const [address, setAddress] = useState();\n  const [faucetAddress, setFaucetAddress] = useState();\n\n  useEffect(() => {\n    const getFaucetAddress = async () => {\n      if (props.localProvider) {\n        const _faucetAddress = await props.localProvider.listAccounts();\n        setFaucetAddress(_faucetAddress[0]);\n        console.log(_faucetAddress);\n      }\n    };\n    getFaucetAddress();\n  }, [props.localProvider]);\n\n  let blockie;\n  if (address && typeof address.toLowerCase === \"function\") {\n    blockie = <Blockies seed={address.toLowerCase()} size={8} scale={4} />;\n  } else {\n    blockie = <div />;\n  }\n\n  const ens = useLookupAddress(props.ensProvider, address);\n\n  const updateAddress = useCallback(\n    async newValue => {\n      if (typeof newValue !== \"undefined\") {\n        let address = newValue;\n        if (address.indexOf(\".eth\") > 0 || address.indexOf(\".xyz\") > 0) {\n          try {\n            const possibleAddress = await props.ensProvider.resolveName(address);\n            if (possibleAddress) {\n              address = possibleAddress;\n            }\n            // eslint-disable-next-line no-empty\n          } catch (e) {}\n        }\n        setAddress(address);\n      }\n    },\n    [props.ensProvider, props.onChange],\n  );\n\n  const tx = Transactor(props.localProvider);\n\n  return (\n    <span>\n      <Input\n        size=\"large\"\n        placeholder={props.placeholder ? props.placeholder : \"local faucet\"}\n        prefix={blockie}\n        // value={address}\n        value={ens || address}\n        onChange={e => {\n          // setAddress(e.target.value);\n          updateAddress(e.target.value);\n        }}\n        suffix={\n          <Tooltip title=\"Faucet: Send local ether to an address.\">\n            <Button\n              onClick={() => {\n                tx({\n                  to: address,\n                  value: utils.parseEther(\"0.01\"),\n                });\n                setAddress(\"\");\n              }}\n              shape=\"circle\"\n              icon={<SendOutlined />}\n            />\n            <Wallet\n              color=\"#888888\"\n              provider={props.localProvider}\n              ensProvider={props.ensProvider}\n              price={props.price}\n              address={faucetAddress}\n            />\n          </Tooltip>\n        }\n      />\n    </span>\n  );\n}\n","import { Button } from \"antd\";\nimport React from \"react\";\n\n// added display of 0 instead of NaN if gas price is not provided\n\n/*\n  ~ What it does? ~\n\n  Displays gas gauge\n\n  ~ How can I use? ~\n\n  <GasGauge\n    gasPrice={gasPrice}\n  />\n\n  ~ Features ~\n\n  - Provide gasPrice={gasPrice} and get current gas gauge\n*/\n\nexport default function GasGauge(props) {\n  return (\n    <Button\n      onClick={() => {\n        window.open(\"https://ethgasstation.info/\");\n      }}\n      size=\"large\"\n      shape=\"round\"\n    >\n      <span style={{ marginRight: 8 }}>\n        <span role=\"img\" aria-label=\"fuelpump\">\n          ⛽️\n        </span>\n      </span>\n      {typeof props.gasPrice === \"undefined\" ? 0 : parseInt(props.gasPrice, 10) / 10 ** 9}g\n    </Button>\n  );\n}\n","import { PageHeader } from \"antd\";\nimport React from \"react\";\n\n// displays a page header\n\nexport default function Header() {\n  return (\n    <a href=\"#XXX\" target=\"_blank\" rel=\"noopener noreferrer\">\n      <PageHeader\n        title=\"BBS\"\n        subTitle=\"Bulletin Block System\"\n        style={{ cursor: \"pointer\" }}\n      />\n    </a>\n  );\n}\n","import { DollarCircleOutlined } from \"@ant-design/icons\";\nimport { RampInstantSDK } from \"@ramp-network/ramp-instant-sdk\";\nimport { Button, Divider, Modal } from \"antd\";\nimport React, { useState } from \"react\";\n\n// added display of 0 if price={price} is not provided\n\n/*\n  ~ What it does? ~\n\n  Displays current ETH price and gives options to buy ETH through Wyre/Ramp/Coinbase\n                            or get through Rinkeby/Ropsten/Kovan/Goerli\n\n  ~ How can I use? ~\n\n  <Ramp\n    price={price}\n    address={address}\n  />\n\n  ~ Features ~\n\n  - Ramp opens directly in the application, component uses RampInstantSDK\n  - Provide price={price} and current ETH price will be displayed\n  - Provide address={address} and your address will be pasted into Wyre/Ramp instantly\n*/\n\nexport default function Ramp(props) {\n  const [modalUp, setModalUp] = useState(\"down\");\n\n  const type = \"default\";\n\n  const allFaucets = [];\n  for (const n in props.networks) {\n    if (props.networks[n].chainId !== 31337 && props.networks[n].chainId !== 1) {\n      allFaucets.push(\n        <p key={props.networks[n].chainId}>\n          <Button\n            style={{ color: props.networks[n].color }}\n            type={type}\n            size=\"large\"\n            shape=\"round\"\n            onClick={() => {\n              window.open(props.networks[n].faucet);\n            }}\n          >\n            {props.networks[n].name}\n          </Button>\n        </p>,\n      );\n    }\n  }\n\n  return (\n    <div>\n      <Button\n        size=\"large\"\n        shape=\"round\"\n        onClick={() => {\n          setModalUp(\"up\");\n        }}\n      >\n        <DollarCircleOutlined style={{ color: \"#52c41a\" }} />{\" \"}\n        {typeof props.price === \"undefined\" ? 0 : props.price.toFixed(2)}\n      </Button>\n      <Modal\n        title=\"Buy ETH\"\n        visible={modalUp === \"up\"}\n        onCancel={() => {\n          setModalUp(\"down\");\n        }}\n        footer={[\n          <Button\n            key=\"back\"\n            onClick={() => {\n              setModalUp(\"down\");\n            }}\n          >\n            cancel\n          </Button>,\n        ]}\n      >\n        <p>\n          <Button\n            type={type}\n            size=\"large\"\n            shape=\"round\"\n            onClick={() => {\n              window.open(\"https://pay.sendwyre.com/purchase?destCurrency=ETH&sourceAmount=25&dest=\" + props.address);\n            }}\n          >\n            <span style={{ paddingRight: 15 }} role=\"img\">\n              <span role=\"img\" aria-label=\"flag-us\">\n                🇺🇸\n              </span>\n            </span>\n            Wyre\n          </Button>\n        </p>\n        <p>\n          {\" \"}\n          <Button\n            type={type}\n            size=\"large\"\n            shape=\"round\"\n            onClick={() => {\n              new RampInstantSDK({\n                hostAppName: \"scaffold-eth\",\n                hostLogoUrl: \"https://scaffoldeth.io/scaffold-eth.png\",\n                swapAmount: \"100000000000000000\", // 0.1 ETH in wei  ?\n                swapAsset: \"ETH\",\n                userAddress: props.address,\n              })\n                .on(\"*\", event => console.log(event))\n                .show();\n            }}\n          >\n            <span style={{ paddingRight: 15 }} role=\"img\">\n              <span role=\"img\" aria-label=\"flag-gb\">\n                🇬🇧\n              </span>\n            </span>\n            Ramp\n          </Button>\n        </p>\n\n        <p>\n          <Button\n            type={type}\n            size=\"large\"\n            shape=\"round\"\n            onClick={() => {\n              window.open(\"https://www.coinbase.com/buy-ethereum\");\n            }}\n          >\n            <span style={{ paddingRight: 15 }} role=\"img\" aria-label=\"bank\">\n              🏦\n            </span>\n            Coinbase\n          </Button>\n        </p>\n\n        <Divider />\n\n        <h2>Testnet ETH</h2>\n\n        {allFaucets}\n      </Modal>\n    </div>\n  );\n}\n","import { RetweetOutlined, SettingOutlined } from \"@ant-design/icons\";\nimport { ChainId, Fetcher, Percent, Token, TokenAmount, Trade, WETH } from \"@uniswap/sdk\";\nimport { abi as IUniswapV2Router02ABI } from \"@uniswap/v2-periphery/build/IUniswapV2Router02.json\";\nimport {\n  Button,\n  Card,\n  Descriptions,\n  Divider,\n  Drawer,\n  InputNumber,\n  Modal,\n  notification,\n  Row,\n  Select,\n  Space,\n  Tooltip,\n  Typography,\n} from \"antd\";\nimport { useBlockNumber, usePoller } from \"eth-hooks\";\nimport { ethers } from \"ethers\";\nimport React, { useEffect, useState } from \"react\";\nimport { useDebounce } from \"../hooks\";\n\nconst { Option } = Select;\nconst { Text } = Typography;\n\nexport const ROUTER_ADDRESS = \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\";\n\nexport const ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\n\nconst erc20Abi = [\n  \"function balanceOf(address owner) view returns (uint256)\",\n  \"function approve(address _spender, uint256 _value) public returns (bool success)\",\n  \"function allowance(address _owner, address _spender) public view returns (uint256 remaining)\",\n];\n\nconst makeCall = async (callName, contract, args, metadata = {}) => {\n  if (contract[callName]) {\n    let result;\n    if (args) {\n      result = await contract[callName](...args, metadata);\n    } else {\n      result = await contract[callName]();\n    }\n    return result;\n  }\n  console.log(\"no call of that name!\");\n};\n\nconst defaultToken = \"ETH\";\nconst defaultTokenOut = \"DAI\";\nconst defaultSlippage = \"0.5\";\nconst defaultTimeLimit = 60 * 10;\n\nconst tokenListToObject = array =>\n  array.reduce((obj, item) => {\n    obj[item.symbol] = new Token(item.chainId, item.address, item.decimals, item.symbol, item.name);\n    return obj;\n  }, {});\n\nfunction Swap({ selectedProvider, tokenListURI }) {\n  const [tokenIn, setTokenIn] = useState(defaultToken);\n  const [tokenOut, setTokenOut] = useState(defaultTokenOut);\n  const [exact, setExact] = useState();\n  const [amountIn, setAmountIn] = useState();\n  const [amountInMax, setAmountInMax] = useState();\n  const [amountOut, setAmountOut] = useState();\n  const [amountOutMin, setAmountOutMin] = useState();\n  const [trades, setTrades] = useState();\n  const [routerAllowance, setRouterAllowance] = useState();\n  const [balanceIn, setBalanceIn] = useState();\n  const [balanceOut, setBalanceOut] = useState();\n  const [slippageTolerance, setSlippageTolerance] = useState(\n    new Percent(Math.round(defaultSlippage * 100).toString(), \"10000\"),\n  );\n  const [timeLimit, setTimeLimit] = useState(defaultTimeLimit);\n  const [swapping, setSwapping] = useState(false);\n  const [approving, setApproving] = useState(false);\n  const [settingsVisible, setSettingsVisible] = useState(false);\n  const [swapModalVisible, setSwapModalVisible] = useState(false);\n\n  const [tokenList, setTokenList] = useState([]);\n\n  const [tokens, setTokens] = useState();\n\n  const [invertPrice, setInvertPrice] = useState(false);\n\n  const blockNumber = useBlockNumber(selectedProvider, 3000);\n\n  const signer = selectedProvider.getSigner();\n  const routerContract = new ethers.Contract(ROUTER_ADDRESS, IUniswapV2Router02ABI, signer);\n\n  const _tokenListUri = tokenListURI || \"https://gateway.ipfs.io/ipns/tokens.uniswap.org\";\n\n  const debouncedAmountIn = useDebounce(amountIn, 500);\n  const debouncedAmountOut = useDebounce(amountOut, 500);\n\n  const activeChainId = process.env.REACT_APP_NETWORK === \"kovan\" ? ChainId.KOVAN : ChainId.MAINNET;\n\n  useEffect(() => {\n    const getTokenList = async () => {\n      console.log(_tokenListUri);\n      try {\n        const tokenList = await fetch(_tokenListUri);\n        const tokenListJson = await tokenList.json();\n        const filteredTokens = tokenListJson.tokens.filter(function (t) {\n          return t.chainId === activeChainId;\n        });\n        const ethToken = WETH[activeChainId];\n        ethToken.name = \"Ethereum\";\n        ethToken.symbol = \"ETH\";\n        ethToken.logoURI =\n          \"https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png\";\n        const _tokenList = [ethToken, ...filteredTokens];\n        setTokenList(_tokenList);\n        const _tokens = tokenListToObject(_tokenList);\n        setTokens(_tokens);\n      } catch (e) {\n        console.log(e);\n      }\n    };\n    getTokenList();\n  }, [tokenListURI]);\n\n  const getTrades = async () => {\n    if (tokenIn && tokenOut && (amountIn || amountOut)) {\n      const pairs = arr => arr.map((v, i) => arr.slice(i + 1).map(w => [v, w])).flat();\n\n      const baseTokens = tokenList\n        .filter(function (t) {\n          return [\"DAI\", \"USDC\", \"USDT\", \"COMP\", \"ETH\", \"MKR\", \"LINK\", tokenIn, tokenOut].includes(t.symbol);\n        })\n        .map(el => {\n          return new Token(el.chainId, el.address, el.decimals, el.symbol, el.name);\n        });\n\n      const listOfPairwiseTokens = pairs(baseTokens);\n\n      const getPairs = async list => {\n        const listOfPromises = list.map(item => Fetcher.fetchPairData(item[0], item[1], selectedProvider));\n        return Promise.all(listOfPromises.map(p => p.catch(() => undefined)));\n      };\n\n      const listOfPairs = await getPairs(listOfPairwiseTokens);\n\n      let bestTrade;\n\n      if (exact === \"in\") {\n        setAmountInMax();\n        bestTrade = Trade.bestTradeExactIn(\n          listOfPairs.filter(item => item),\n          new TokenAmount(tokens[tokenIn], ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals)),\n          tokens[tokenOut],\n          { maxNumResults: 3, maxHops: 1 },\n        );\n        if (bestTrade[0]) {\n          setAmountOut(bestTrade[0].outputAmount.toSignificant(6));\n        } else {\n          setAmountOut();\n        }\n      } else if (exact === \"out\") {\n        setAmountOutMin();\n        bestTrade = Trade.bestTradeExactOut(\n          listOfPairs.filter(item => item),\n          tokens[tokenIn],\n          new TokenAmount(tokens[tokenOut], ethers.utils.parseUnits(amountOut.toString(), tokens[tokenOut].decimals)),\n          { maxNumResults: 3, maxHops: 1 },\n        );\n        if (bestTrade[0]) {\n          setAmountIn(bestTrade[0].inputAmount.toSignificant(6));\n        } else {\n          setAmountIn();\n        }\n      }\n\n      setTrades(bestTrade);\n\n      console.log(bestTrade);\n    }\n  };\n\n  useEffect(() => {\n    getTrades();\n  }, [tokenIn, tokenOut, debouncedAmountIn, debouncedAmountOut, slippageTolerance, selectedProvider]);\n\n  useEffect(() => {\n    if (trades && trades[0]) {\n      if (exact === \"in\") {\n        setAmountOutMin(trades[0].minimumAmountOut(slippageTolerance));\n      } else if (exact === \"out\") {\n        setAmountInMax(trades[0].maximumAmountIn(slippageTolerance));\n      }\n    }\n  }, [slippageTolerance, amountIn, amountOut, trades]);\n\n  const getBalance = async (_token, _account, _contract) => {\n    let newBalance;\n    if (_token === \"ETH\") {\n      newBalance = await selectedProvider.getBalance(_account);\n    } else {\n      newBalance = await makeCall(\"balanceOf\", _contract, [_account]);\n    }\n    return newBalance;\n  };\n\n  const getAccountInfo = async () => {\n    if (tokens) {\n      const accountList = await selectedProvider.listAccounts();\n\n      if (tokenIn) {\n        const tempContractIn = new ethers.Contract(tokens[tokenIn].address, erc20Abi, selectedProvider);\n        const newBalanceIn = await getBalance(tokenIn, accountList[0], tempContractIn);\n        setBalanceIn(newBalanceIn);\n\n        let allowance;\n\n        if (tokenIn === \"ETH\") {\n          setRouterAllowance();\n        } else {\n          allowance = await makeCall(\"allowance\", tempContractIn, [accountList[0], ROUTER_ADDRESS]);\n          setRouterAllowance(allowance);\n        }\n      }\n\n      if (tokenOut) {\n        const tempContractOut = new ethers.Contract(tokens[tokenOut].address, erc20Abi, selectedProvider);\n        const newBalanceOut = await getBalance(tokenOut, accountList[0], tempContractOut);\n        setBalanceOut(newBalanceOut);\n      }\n    }\n  };\n\n  usePoller(getAccountInfo, 6000);\n\n  const route = trades\n    ? trades.length > 0\n      ? trades[0].route.path.map(function (item) {\n          return item.symbol;\n        })\n      : []\n    : [];\n\n  const updateRouterAllowance = async newAllowance => {\n    setApproving(true);\n    try {\n      const tempContract = new ethers.Contract(tokens[tokenIn].address, erc20Abi, signer);\n      const result = await makeCall(\"approve\", tempContract, [ROUTER_ADDRESS, newAllowance]);\n      console.log(result);\n      setApproving(false);\n      return true;\n    } catch (e) {\n      notification.open({\n        message: \"Approval unsuccessful\",\n        description: `Error: ${e.message}`,\n      });\n    }\n  };\n\n  const approveRouter = async () => {\n    const approvalAmount =\n      exact === \"in\"\n        ? ethers.utils.hexlify(ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals))\n        : amountInMax.raw.toString();\n    console.log(approvalAmount);\n    const approval = updateRouterAllowance(approvalAmount);\n    if (approval) {\n      notification.open({\n        message: \"Token transfer approved\",\n        description: `You can now swap up to ${amountIn} ${tokenIn}`,\n      });\n    }\n  };\n\n  const removeRouterAllowance = async () => {\n    const approvalAmount = ethers.utils.hexlify(0);\n    console.log(approvalAmount);\n    const removal = updateRouterAllowance(approvalAmount);\n    if (removal) {\n      notification.open({\n        message: \"Token approval removed\",\n        description: `The router is no longer approved for ${tokenIn}`,\n      });\n    }\n  };\n\n  const executeSwap = async () => {\n    setSwapping(true);\n    try {\n      let args;\n      const metadata = {};\n\n      let call;\n      const deadline = Math.floor(Date.now() / 1000) + timeLimit;\n      const path = trades[0].route.path.map(function (item) {\n        return item.address;\n      });\n      console.log(path);\n      const accountList = await selectedProvider.listAccounts();\n      const address = accountList[0];\n\n      if (exact === \"in\") {\n        const _amountIn = ethers.utils.hexlify(ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals));\n        const _amountOutMin = ethers.utils.hexlify(ethers.BigNumber.from(amountOutMin.raw.toString()));\n        if (tokenIn === \"ETH\") {\n          call = \"swapExactETHForTokens\";\n          args = [_amountOutMin, path, address, deadline];\n          metadata.value = _amountIn;\n        } else {\n          call = tokenOut === \"ETH\" ? \"swapExactTokensForETH\" : \"swapExactTokensForTokens\";\n          args = [_amountIn, _amountOutMin, path, address, deadline];\n        }\n      } else if (exact === \"out\") {\n        const _amountOut = ethers.utils.hexlify(\n          ethers.utils.parseUnits(amountOut.toString(), tokens[tokenOut].decimals),\n        );\n        const _amountInMax = ethers.utils.hexlify(ethers.BigNumber.from(amountInMax.raw.toString()));\n        if (tokenIn === \"ETH\") {\n          call = \"swapETHForExactTokens\";\n          args = [_amountOut, path, address, deadline];\n          metadata.value = _amountInMax;\n        } else {\n          call = tokenOut === \"ETH\" ? \"swapTokensForExactETH\" : \"swapTokensForExactTokens\";\n          args = [_amountOut, _amountInMax, path, address, deadline];\n        }\n      }\n      console.log(call, args, metadata);\n      const result = await makeCall(call, routerContract, args, metadata);\n      console.log(result);\n      notification.open({\n        message: \"Swap complete 🦄\",\n        description: (\n          <>\n            <Text>{`Swapped ${tokenIn} for ${tokenOut}, transaction: `}</Text>\n            <Text copyable>{result.hash}</Text>\n          </>\n        ),\n      });\n      setSwapping(false);\n    } catch (e) {\n      console.log(e);\n      setSwapping(false);\n      notification.open({\n        message: \"Swap unsuccessful\",\n        description: `Error: ${e.message}`,\n      });\n    }\n  };\n\n  const showSwapModal = () => {\n    setSwapModalVisible(true);\n  };\n\n  const handleSwapModalOk = () => {\n    setSwapModalVisible(false);\n    executeSwap();\n  };\n\n  const handleSwapModalCancel = () => {\n    setSwapModalVisible(false);\n  };\n\n  const insufficientBalance = balanceIn\n    ? parseFloat(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals)) < amountIn\n    : null;\n  const inputIsToken = tokenIn !== \"ETH\";\n  const insufficientAllowance = !inputIsToken\n    ? false\n    : routerAllowance\n    ? parseFloat(ethers.utils.formatUnits(routerAllowance, tokens[tokenIn].decimals)) < amountIn\n    : null;\n  const formattedBalanceIn = balanceIn\n    ? parseFloat(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals)).toPrecision(6)\n    : null;\n  const formattedBalanceOut = balanceOut\n    ? parseFloat(ethers.utils.formatUnits(balanceOut, tokens[tokenOut].decimals)).toPrecision(6)\n    : null;\n\n  const metaIn =\n    tokens && tokenList && tokenIn\n      ? tokenList.filter(function (t) {\n          return t.address === tokens[tokenIn].address;\n        })[0]\n      : null;\n  const metaOut =\n    tokens && tokenList && tokenOut\n      ? tokenList.filter(function (t) {\n          return t.address === tokens[tokenOut].address;\n        })[0]\n      : null;\n\n  const cleanIpfsURI = uri => {\n    try {\n      return uri.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\");\n    } catch (e) {\n      console.log(e, uri);\n      return uri;\n    }\n  };\n\n  const logoIn = metaIn ? cleanIpfsURI(metaIn.logoURI) : null;\n  const logoOut = metaOut ? cleanIpfsURI(metaOut.logoURI) : null;\n\n  const rawPrice = trades && trades[0] ? trades[0].executionPrice : null;\n  const price = rawPrice ? rawPrice.toSignificant(7) : null;\n  const priceDescription = rawPrice\n    ? invertPrice\n      ? `${rawPrice.invert().toSignificant(7)} ${tokenIn} per ${tokenOut}`\n      : `${price} ${tokenOut} per ${tokenIn}`\n    : null;\n\n  const priceWidget = (\n    <Space>\n      <Text type=\"secondary\">{priceDescription}</Text>\n      <Button\n        type=\"text\"\n        onClick={() => {\n          setInvertPrice(!invertPrice);\n        }}\n      >\n        <RetweetOutlined />\n      </Button>\n    </Space>\n  );\n\n  const swapModal = (\n    <Modal title=\"Confirm swap\" visible={swapModalVisible} onOk={handleSwapModalOk} onCancel={handleSwapModalCancel}>\n      <Row>\n        <Space>\n          <img src={logoIn} alt={tokenIn} width=\"30\" />\n          {amountIn}\n          {tokenIn}\n        </Space>\n      </Row>\n      <Row justify=\"center\" align=\"middle\" style={{ width: 30 }}>\n        <span>↓</span>\n      </Row>\n      <Row>\n        <Space>\n          <img src={logoOut} alt={tokenOut} width=\"30\" />\n          {amountOut}\n          {tokenOut}\n        </Space>\n      </Row>\n      <Divider />\n      <Row>{priceWidget}</Row>\n      <Row>\n        {trades && ((amountOutMin && exact === \"in\") || (amountInMax && exact === \"out\"))\n          ? exact === \"in\"\n            ? `Output is estimated. You will receive at least ${amountOutMin.toSignificant(\n                6,\n              )} ${tokenOut} or the transaction will revert.`\n            : `Input is estimated. You will sell at most ${amountInMax.toSignificant(\n                6,\n              )} ${tokenIn} or the transaction will revert.`\n          : null}\n      </Row>\n    </Modal>\n  );\n\n  return (\n    <Card\n      title={\n        <Space>\n          <img src=\"https://ipfs.io/ipfs/QmXttGpZrECX5qCyXbBQiqgQNytVGeZW5Anewvh2jc4psg\" width=\"40\" alt=\"uniswapLogo\" />\n          <Typography>Uniswapper</Typography>\n        </Space>\n      }\n      extra={\n        <Button\n          type=\"text\"\n          onClick={() => {\n            setSettingsVisible(true);\n          }}\n        >\n          <SettingOutlined />\n        </Button>\n      }\n    >\n      <Space direction=\"vertical\">\n        <Row justify=\"center\" align=\"middle\">\n          <Card\n            size=\"small\"\n            type=\"inner\"\n            title={`From${exact === \"out\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\n            extra={\n              <>\n                <img src={logoIn} alt={tokenIn} width=\"30\" />\n                <Button\n                  type=\"link\"\n                  onClick={() => {\n                    setAmountOut();\n                    setAmountIn(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals));\n                    setAmountOutMin();\n                    setAmountInMax();\n                    setExact(\"in\");\n                  }}\n                >\n                  {formattedBalanceIn}\n                </Button>\n              </>\n            }\n            style={{ width: 400, textAlign: \"left\" }}\n          >\n            <InputNumber\n              style={{ width: \"160px\" }}\n              min={0}\n              size=\"large\"\n              value={amountIn}\n              onChange={e => {\n                setAmountOut();\n                setTrades();\n                setAmountIn(e);\n                setExact(\"in\");\n              }}\n            />\n            <Select\n              showSearch\n              value={tokenIn}\n              style={{ width: \"120px\" }}\n              size=\"large\"\n              bordered={false}\n              defaultValue={defaultToken}\n              onChange={value => {\n                console.log(value);\n                if (value === tokenOut) {\n                  console.log(\"switch!\", tokenIn);\n                  setTokenOut(tokenIn);\n                  setAmountOut(amountIn);\n                  setBalanceOut(balanceIn);\n                }\n                setTokenIn(value);\n                setTrades();\n                setAmountIn();\n                setExact(\"out\");\n                setBalanceIn();\n              }}\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n              optionFilterProp=\"children\"\n            >\n              {tokenList.map(token => (\n                <Option key={token.symbol} value={token.symbol}>\n                  {token.symbol}\n                </Option>\n              ))}\n            </Select>\n          </Card>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Tooltip title={route.join(\"->\")}>\n            <span>↓</span>\n          </Tooltip>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Card\n            size=\"small\"\n            type=\"inner\"\n            title={`To${exact === \"in\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\n            extra={\n              <>\n                <img src={logoOut} width=\"30\" alt={tokenOut} />\n                <Button type=\"text\">{formattedBalanceOut}</Button>\n              </>\n            }\n            style={{ width: 400, textAlign: \"left\" }}\n          >\n            <InputNumber\n              style={{ width: \"160px\" }}\n              size=\"large\"\n              min={0}\n              value={amountOut}\n              onChange={e => {\n                setAmountOut(e);\n                setAmountIn();\n                setTrades();\n                setExact(\"out\");\n              }}\n            />\n            <Select\n              showSearch\n              value={tokenOut}\n              style={{ width: \"120px\" }}\n              size=\"large\"\n              bordered={false}\n              onChange={value => {\n                console.log(value, tokenIn, tokenOut);\n                if (value === tokenIn) {\n                  console.log(\"switch!\", tokenOut);\n                  setTokenIn(tokenOut);\n                  setAmountIn(amountOut);\n                  setBalanceIn(balanceOut);\n                }\n                setTokenOut(value);\n                setExact(\"in\");\n                setAmountOut();\n                setTrades();\n                setBalanceOut();\n              }}\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n              optionFilterProp=\"children\"\n            >\n              {tokenList.map(token => (\n                <Option key={token.symbol} value={token.symbol}>\n                  {token.symbol}\n                </Option>\n              ))}\n            </Select>\n          </Card>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          {priceDescription ? priceWidget : null}\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Space>\n            {inputIsToken ? (\n              <Button size=\"large\" loading={approving} disabled={!insufficientAllowance} onClick={approveRouter}>\n                {!insufficientAllowance && amountIn && amountOut ? \"Approved\" : \"Approve\"}\n              </Button>\n            ) : null}\n            <Button\n              size=\"large\"\n              loading={swapping}\n              disabled={insufficientAllowance || insufficientBalance || !amountIn || !amountOut}\n              onClick={showSwapModal}\n            >\n              {insufficientBalance ? \"Insufficient balance\" : \"Swap!\"}\n            </Button>\n            {swapModal}\n          </Space>\n        </Row>\n      </Space>\n      <Drawer\n        visible={settingsVisible}\n        onClose={() => {\n          setSettingsVisible(false);\n        }}\n        width={500}\n      >\n        <Descriptions title=\"Details\" column={1} style={{ textAlign: \"left\" }}>\n          <Descriptions.Item label=\"blockNumber\">{blockNumber}</Descriptions.Item>\n          <Descriptions.Item label=\"routerAllowance\">\n            <Space>\n              {routerAllowance ? ethers.utils.formatUnits(routerAllowance, tokens[tokenIn].decimals) : null}\n              {routerAllowance > 0 ? <Button onClick={removeRouterAllowance}>Remove Allowance</Button> : null}\n            </Space>\n          </Descriptions.Item>\n          <Descriptions.Item label=\"route\">{route.join(\"->\")}</Descriptions.Item>\n          <Descriptions.Item label=\"exact\">{exact}</Descriptions.Item>\n          <Descriptions.Item label=\"bestPrice\">\n            {trades ? (trades.length > 0 ? trades[0].executionPrice.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"nextMidPrice\">\n            {trades ? (trades.length > 0 ? trades[0].nextMidPrice.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"priceImpact\">\n            {trades ? (trades.length > 0 ? trades[0].priceImpact.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"slippageTolerance\">\n            <InputNumber\n              defaultValue={defaultSlippage}\n              min={0}\n              max={100}\n              precision={2}\n              formatter={value => `${value}%`}\n              parser={value => value.replace(\"%\", \"\")}\n              onChange={value => {\n                console.log(value);\n\n                const slippagePercent = new Percent(Math.round(value * 100).toString(), \"10000\");\n                setSlippageTolerance(slippagePercent);\n              }}\n            />\n          </Descriptions.Item>\n          <Descriptions.Item label=\"amountInMax\">{amountInMax ? amountInMax.toExact() : null}</Descriptions.Item>\n          <Descriptions.Item label=\"amountOutMin\">{amountOutMin ? amountOutMin.toExact() : null}</Descriptions.Item>\n          <Descriptions.Item label=\"timeLimitInSeconds\">\n            <InputNumber\n              min={0}\n              max={3600}\n              defaultValue={defaultTimeLimit}\n              onChange={value => {\n                console.log(value);\n                setTimeLimit(value);\n              }}\n            />\n          </Descriptions.Item>\n        </Descriptions>\n      </Drawer>\n    </Card>\n  );\n}\n\nexport default Swap;\n","import { Switch } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\n\nexport default function ThemeSwitcher() {\n  const theme = window.localStorage.getItem(\"theme\");\n  const [isDarkMode, setIsDarkMode] = useState(!(!theme || theme === \"light\"));\n  const { switcher, currentTheme, status, themes } = useThemeSwitcher();\n\n  useEffect(() => {\n    window.localStorage.setItem(\"theme\", currentTheme);\n  }, [currentTheme]);\n\n  const toggleTheme = isChecked => {\n    setIsDarkMode(isChecked);\n    switcher({ theme: isChecked ? themes.dark : themes.light });\n  };\n\n  // Avoid theme change flicker\n  // if (status === \"loading\") {\n  //   return null;\n  // }\n\n  return (\n    <div className=\"main fade-in\" style={{ position: \"fixed\", right: 8, bottom: 8 }}>\n      <span style={{ padding: 8 }}>{currentTheme === \"light\" ? \"☀️\" : \"🌜\"}</span>\n      <Switch checked={isDarkMode} onChange={toggleTheme} />\n    </div>\n  );\n}\n","import { DownloadOutlined, EditOutlined, SendOutlined } from \"@ant-design/icons\";\nimport { Timeline, Typography } from \"antd\";\nimport React from \"react\";\nimport Blockies from \"react-blockies\";\n\nconst { Text } = Typography;\n\n// displays a timeline for scaffold-eth usage\n\nexport default function TimelineDisplay(props) {\n  return (\n    <Timeline mode=\"right\">\n      <Timeline.Item dot=\"💾\">\n        <Text delete>\n          Clone and Install from the{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/austintgriffith/scaffold-eth\">\n            github repo\n          </a>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"⚛️\">\n        <Text delete>\n          Start your frontend app with: <Text strong>yarn start</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"⛓\">\n        <Text delete={props.chainIsUp}>\n          Start your local blockchain with: <Text strong>yarn run chain</Text> (and refresh)\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"📝\">\n        <Text delete={props.hasOwner}>\n          Compile and deploy your smart contract: <Text strong>yarn run deploy</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🤡\">\n        <Text delete={props.isNotSmoort}>\n          Fix error in <Text code>SmartContractWallet.sol</Text> then: <Text strong>yarn run deploy</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot={<SendOutlined style={{ fontSize: \"16px\" }} />} color={props.hasEther ? \"green\" : \"blue\"}>\n        <Text delete={props.hasEther}>\n          Send test ether to your{\" \"}\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address using\n          (bottom left) faucet\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item\n        dot={<DownloadOutlined style={{ fontSize: \"16px\" }} />}\n        color={props.contractHasEther ? \"green\" : \"blue\"}\n      >\n        <Text delete={props.contractHasEther}>\n          Deposit some funds into your{\" \"}\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\n          smart contract wallet\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item\n        dot={<EditOutlined style={{ fontSize: \"16px\" }} />}\n        color={props.amOwnerOfContract ? \"green\" : \"blue\"}\n      >\n        <Text delete={props.amOwnerOfContract}>\n          Set <b>owner</b> of your{\" \"}\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\n          smart contract wallet to your{\" \"}\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"☢️\">\n        <Text>\n          Yikes, anyone can take ownership of <Text code>SmartContractWallet.sol</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🔬\">\n        <Text>\n          Test your contract with <Text code>buidler/test/myTest.js</Text> then:\n          <Text strong>yarn run test</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🚀\">\n        <Text>\n          Build something awesome with 🏗 <a href=\"https://github.com/austintgriffith/scaffold-eth\">scaffold-eth</a> and{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://twitter.com/austingriffith\">\n            @ me\n          </a>\n          !\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"📖\">\n        <Text>\n          Read more about{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://ethereum.org/developers\">\n            Ethereum\n          </a>\n          ,{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://solidity.readthedocs.io/en/develop/contracts.html\">\n            Solidity\n          </a>\n          , and{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://buidler.dev/tutorial\">\n            Buidler\n          </a>\n        </Text>\n      </Timeline.Item>\n    </Timeline>\n  );\n}\n","import { utils, ethers } from \"ethers\";\nimport { Button, Input, Form, Select, InputNumber, Table, Radio } from \"antd\";\nimport React, { useState, useEffect } from \"react\";\nimport { useContractLoader, useOnBlock } from \"../hooks\";\nimport { NETWORKS } from \"../constants\";\nimport { Transactor } from \"../helpers\";\n\n/*\nThis is a component for bridging between L1 & L2\nCurrently it supports Testnet deposits for Arbitrum & Optimism\n\n __          _______ _____\n \\ \\        / /_   _|  __ \\\n  \\ \\  /\\  / /  | | | |__) |\n   \\ \\/  \\/ /   | | |  ___/\n    \\  /\\  /   _| |_| |\n     \\/  \\/   |_____|_|\n\n\n*/\n\nexport default function L2ArbitrumBridge({ address, userSigner }) {\n  const [L1EthBalance, setL1EthBalance] = useState(\"...\");\n  const [L2EthBalance, setL2EthBalance] = useState(\"...\");\n  const [L1Provider, setL1Provider] = useState(\"\");\n  const [L2Provider, setL2Provider] = useState(\"\");\n  const [rollup, setRollup] = useState(\"arbitrum\");\n  const [environment, setEnvironment] = useState(\"test\");\n\n  const rollupConfig = {\n    arbitrum: {\n      test: { L1: NETWORKS.rinkeby, L2: NETWORKS.rinkebyArbitrum },\n      main: { L1: NETWORKS.mainnet, L2: NETWORKS.arbitrum },\n      local: { L1: NETWORKS.localArbitrumL1, L2: NETWORKS.localArbitrum },\n    },\n    optimism: {\n      test: { L1: NETWORKS.kovan, L2: NETWORKS.kovanOptimism },\n      local: { L1: NETWORKS.localOptimismL1, L2: NETWORKS.localOptimism },\n    },\n  };\n\n  const activeConfig = rollupConfig[rollup][environment];\n\n  const selectedChainId =\n    userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\n\n  const tx = Transactor(userSigner);\n\n  useEffect(() => {\n    async function setProviders() {\n      const L1 = activeConfig.L1;\n      const L2 = activeConfig.L2;\n      setL1Provider(new ethers.providers.StaticJsonRpcProvider(L1.rpcUrl));\n      setL2Provider(new ethers.providers.StaticJsonRpcProvider(L2.rpcUrl));\n      setL1EthBalance(\"...\");\n      setL2EthBalance(\"...\");\n    }\n    setProviders();\n  }, [rollup]);\n\n  const contracts = useContractLoader(userSigner, { externalContracts: L1BridgeMetadata, hardhatContracts: {} });\n\n  useOnBlock(L1Provider, async () => {\n    console.log(`⛓ A new mainnet block is here: ${L1Provider._lastBlockNumber}`);\n    const yourL1Balance = await L1Provider.getBalance(address);\n    setL1EthBalance(yourL1Balance ? ethers.utils.formatEther(yourL1Balance) : \"...\");\n    const yourL2Balance = await L2Provider.getBalance(address);\n    setL2EthBalance(yourL2Balance ? ethers.utils.formatEther(yourL2Balance) : \"...\");\n  });\n\n  const { Option } = Select;\n  const formItemLayout = {\n    labelCol: {\n      xs: { span: 24 },\n      sm: { span: 8 },\n    },\n    wrapperCol: {\n      xs: { span: 24 },\n      sm: { span: 12 },\n    },\n  };\n  const tailFormItemLayout = {\n    wrapperCol: {\n      xs: {\n        span: 24,\n        offset: 0,\n      },\n      sm: {\n        span: 12,\n        offset: 8,\n      },\n    },\n  };\n\n  const columns = [\n    {\n      title: \"\",\n      dataIndex: \"token\",\n      key: \"token\",\n      align: \"center\",\n    },\n    {\n      title: `${activeConfig.L1.name} L1 Balance`,\n      dataIndex: \"l1\",\n      key: \"l1\",\n      align: \"center\",\n    },\n    {\n      title: `${activeConfig.L1.name} ${rollup} Balance`,\n      dataIndex: \"l2\",\n      key: \"l2\",\n      align: \"center\",\n    },\n  ];\n\n  const data = [\n    {\n      key: \"1\",\n      token: \"ETH\",\n      l1: \"Ξ\" + L1EthBalance,\n      l2: \"Ξ\" + L2EthBalance,\n    },\n  ];\n\n  const [form] = Form.useForm();\n\n  const onAssetChange = value => {\n    console.log(value);\n  };\n\n  async function onFinish(values) {\n    console.log(contracts);\n    console.log(values.amount.toString());\n    console.log(rollup);\n    let newTx;\n    try {\n      if (rollup === \"arbitrum\") {\n        newTx = await tx(\n          contracts.Inbox.depositEth(1_300_000, {\n            value: utils.parseEther(values.amount.toString()),\n            gasLimit: 300000,\n          }),\n        );\n      } else if (rollup === \"optimism\") {\n        newTx = await tx(\n          contracts.OVM_L1StandardBridge.depositETH(1_300_000, \"0x\", {\n            value: utils.parseEther(values.amount.toString()),\n          }),\n        );\n      }\n      await newTx.wait();\n      console.log(\"woop!\");\n    } catch (e) {\n      console.log(e);\n      console.log(\"something went wrong!\");\n    }\n  }\n\n  const onReset = () => {\n    form.resetFields();\n  };\n\n  const wrongNetwork = selectedChainId !== activeConfig.L1.chainId;\n\n  return (\n    <div style={{ padding: 16, width: 800, margin: \"auto\", marginBottom: 128 }}>\n      <div style={{ border: \"1px solid #cccccc\", padding: 16, width: 800, margin: \"auto\", marginBottom: 128 }}>\n        <h2>Welcome to the L2 Deposit Bridge!</h2>\n        <Radio.Group\n          value={rollup}\n          onChange={e => {\n            setRollup(e.target.value);\n          }}\n          style={{ marginBottom: 10 }}\n        >\n          <Radio.Button value=\"arbitrum\">Arbitrum</Radio.Button>\n          <Radio.Button value=\"optimism\">Optimism</Radio.Button>\n        </Radio.Group>\n\n        <Table columns={columns} dataSource={data} pagination={false} style={{ marginBottom: 20 }} />\n\n        <Form\n          {...formItemLayout}\n          form={form}\n          name=\"control-hooks\"\n          onFinish={onFinish}\n          initialValues={{ assetType: \"eth\" }}\n        >\n          <Form.Item\n            name=\"assetType\"\n            label=\"Select Asset Type\"\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n          >\n            <Select placeholder=\"Select an asset type\" onChange={onAssetChange} allowClear>\n              <Option value=\"eth\">ETH</Option>\n              <Option disabled value=\"erc20\">\n                ERC-20\n              </Option>\n            </Select>\n          </Form.Item>\n          <Form.Item name=\"address\" label=\"Address\">\n            <Input disabled placeholder={address} />\n          </Form.Item>\n          <Form.Item\n            name=\"amount\"\n            label=\"Amount to bridge\"\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n          >\n            <InputNumber />\n          </Form.Item>\n          <Form.Item {...tailFormItemLayout}>\n            <Button type=\"primary\" htmlType=\"submit\" disabled={wrongNetwork}>\n              {wrongNetwork ? `Switch wallet to ${activeConfig.L1.name}` : \"Deposit\"}\n            </Button>\n          </Form.Item>\n        </Form>\n      </div>\n    </div>\n  );\n}\n\n// Arbitrum Inbox https://rinkeby.etherscan.io/address/0xa157dc79ca26d69c3b1282d03ec42bdee2790a8f#code\nconst ArbitrumInboxABI = [\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, internalType: \"uint256\", name: \"messageNum\", type: \"uint256\" },\n      { indexed: false, internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"InboxMessageDelivered\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [{ indexed: true, internalType: \"uint256\", name: \"messageNum\", type: \"uint256\" }],\n    name: \"InboxMessageDeliveredFromOrigin\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [{ indexed: false, internalType: \"address\", name: \"newSource\", type: \"address\" }],\n    name: \"WhitelistSourceUpdated\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"bridge\",\n    outputs: [{ internalType: \"contract IBridge\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"uint256\", name: \"l2CallValue\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"maxSubmissionCost\", type: \"uint256\" },\n      { internalType: \"address\", name: \"excessFeeRefundAddress\", type: \"address\" },\n      { internalType: \"address\", name: \"callValueRefundAddress\", type: \"address\" },\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"createRetryableTicket\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"uint256\", name: \"maxSubmissionCost\", type: \"uint256\" }],\n    name: \"depositEth\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"contract IBridge\", name: \"_bridge\", type: \"address\" },\n      { internalType: \"address\", name: \"_whitelist\", type: \"address\" },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"isMaster\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendContractTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendL1FundedContractTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"nonce\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendL1FundedUnsignedTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"bytes\", name: \"messageData\", type: \"bytes\" }],\n    name: \"sendL2Message\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"bytes\", name: \"messageData\", type: \"bytes\" }],\n    name: \"sendL2MessageFromOrigin\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"nonce\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendUnsignedTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"newSource\", type: \"address\" }],\n    name: \"updateWhitelistSource\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"whitelist\",\n    outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\n// https://github.com/ethereum-optimism/optimism/blob/2bd49730fa8d2c10953873f0ccc792198a49d5c9/packages/contracts/contracts/optimistic-ethereum/iOVM/bridge/tokens/iOVM_L1StandardBridge.sol\nconst OVM_L1StandardBridgeABI = [\n  \"function depositETH(uint32 _l2Gas,bytes calldata _data) external payable\",\n  \"function depositETHTo(address _to,uint32 _l2Gas,bytes calldata _data) external payable\",\n  \"function finalizeETHWithdrawal (address _from,address _to,uint _amount,bytes calldata _data) external\",\n];\n\nconst L1BridgeMetadata = {\n  // Arbitrium Contract's\n  44010: {\n    contracts: {\n      Inbox: {\n        address: \"0xA4d796Ad4e79aFB703340a596AEd88f8a5924183\",\n        abi: ArbitrumInboxABI,\n      },\n    },\n  },\n  4: {\n    contracts: {\n      Inbox: {\n        address: \"0x578bade599406a8fe3d24fd7f7211c0911f5b29e\",\n        abi: ArbitrumInboxABI,\n      },\n    },\n  },\n  // Optimism Contract's\n  31337: {\n    contracts: {\n      OVM_L1StandardBridge: {\n        address: \"0x998abeb3E57409262aE5b751f60747921B33613E\",\n        abi: OVM_L1StandardBridgeABI,\n      },\n    },\n  },\n  42: {\n    contracts: {\n      OVM_L1StandardBridge: {\n        address: \"0x22F24361D548e5FaAfb36d1437839f080363982B\",\n        abi: OVM_L1StandardBridgeABI,\n      },\n    },\n  },\n};\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport { default as AnsiUp } from 'ansi_up';\nimport './AnsiImageRender.css';\n\nexport default function AnsiImageRender({ tokenURI, style }) {\n  const [html, setNewState] = useState('');\n  const [isFetching, setIsFetching] = useState(false);\n\n  // tokenURI = 'ipfs://bafyreih4ki2rd2yow7yh6m3vyq27icq35dhtlpuuq3xa34aknzegpcvtu4/metadata.json';\n  useEffect(() => {\n    fetchHtml(tokenURI);\n  }, [tokenURI]);\n  \n\n  const fetchHtml = (url) => {\n    if (!url || url == '')\n      return;\n\n    if (url.startsWith('ipfs://')) {\n      url = url.replace('ipfs://', 'https://dweb.link/ipfs/');\n      url = url.replaceAll(' ', '%20');\n    }\n    setIsFetching(true);\n\n    if (url.endsWith('.json')) {\n      fetch(url, {\n        \"method\": \"GET\",\n        \"headers\": {\n        }\n      })\n        .then(response => response.json())\n        .then(response => {\n          let tokenUri = response.properties.srcFile ?? 'tna1.ans';\n          fetchHtml(tokenUri);\n        })\n        .catch(err => {\n          console.log(err);\n          setIsFetching(false);\n        });\n\n    // } else if (url.endsWith('.ans')) {\n      } else {\n      fetch(url, {\n        \"method\": \"GET\",\n        \"headers\": {\n        }\n      })\n        .then(response => response.arrayBuffer())\n        .then(response => {\n\n          let decoder = new TextDecoder('ISO-8859-1');\n          let text = decoder.decode(response);\n\n          const ansi_up = new AnsiUp();\n          let htmlResp = ansi_up.ansi_to_html(text);\n          setNewState(htmlResp);\n          setIsFetching(false);\n        })\n        .catch(err => {\n          console.log(err);\n          setIsFetching(false);\n        });\n    }\n  }\n\n  if (!html && !isFetching) {\n    fetchHtml(tokenURI);\n  }\n\n  return (\n    <pre dangerouslySetInnerHTML={{ __html: html }} style={style} className=\"ansi-img\">\n\n    </pre>\n  );\n}\n","import { SyncOutlined } from \"@ant-design/icons\";\nimport { utils } from \"ethers\";\nimport { Button, Card, DatePicker, Divider, Input, List, Progress, Slider, Spin, Switch } from \"antd\";\nimport React, { useState } from \"react\";\nimport { Address, Balance } from \"../components\";\nimport AnsiImageRender from \"./AnsiImageRender\"\nimport { StoreFileOnIPFS } from \"../helpers\";\n\n//import Button from \"@material-ui/core/Button\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Modal from '@material-ui/core/Modal';\n\nimport { NFTStorage, File } from 'nft.storage';\n\nconst nftStorageApiKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkaWQ6ZXRocjoweDQzYjgwMzQ4MzY1MWE4MDE5MjU5NzQ2MjY5ZjM1ZDI4NUMzMEJlQjkiLCJpc3MiOiJuZnQtc3RvcmFnZSIsImlhdCI6MTYyODE1NzYxNTc3NCwibmFtZSI6ImtleTEifQ.G9BNydhDBxYJqYr06xSW-hRbkj5AptqaijFokHPx3h0';\nconst nftsClient = new NFTStorage({ token: nftStorageApiKey })\n\nasync function nftsTestStoreString(s) {\n  const metadata = await nftsClient.store({\n    name: 'nft.storage store test',\n    description: 'Description: ' + s,\n    image: new File(['<DATA>'], 'notansi.jpg', { type: 'image/jpg' }),\n    //image: new Blob('XXX'),\n    properties: {\n      custom: 'Custom data can appear here, files are auto uploaded.',\n      //file: new File(['<DATA>'], 'README.md', { type: 'text/plain' }),\n      file: new File([new Blob(['this is a blob', 'by tomo'])], 'README.md', { type: 'text/plain' }),\n    }\n  })\n\n  console.log('IPFS URL for the metadata:', metadata.url)\n  console.log('metadata.json contents:\\n', metadata.data)\n  console.log('metadata.json with IPFS gateway URLs:\\n', metadata.embed())\n}\n\n\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\nconst useModalStyles = makeStyles((theme) => ({\n  paper: {\n    position: 'absolute',\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\nfunction MakeBlockModal() {\n\n  const classes = useModalStyles();\n  // getModalStyle is not a pure function, we roll the style only on the first render\n  const [modalStyle] = React.useState(getModalStyle);\n  const [open, setOpen] = React.useState(false);\n  const [selectedFileState, setSelectedFileState ] = React.useState({});\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  var file;\n  var fileObjectUrl;\n  const processFile = (f) => {\n    console.log('file selected', f);\n    file = f;\n    const reader = new FileReader();\n    fileObjectUrl = window.URL.createObjectURL(f);\n    let userMessage = 'File selected'\n    setSelectedFileState({file, fileObjectUrl, userMessage});\n  }\n\n  const uploadFileAndProceed = async () => {\n    let userMessage = 'File is being uploaded to IPFS...';\n    setSelectedFileState({...selectedFileState, userMessage})\n    let metadata = await StoreFileOnIPFS('name', 'description', undefined, selectedFileState.file);\n    userMessage = 'File upload complete. Proceed to submit transaction.'\n    setSelectedFileState({...selectedFileState, metadata, userMessage});\n  }\n\n  \n\n  const body = (\n    <div style={modalStyle} className={classes.paper}>\n      <h2 id=\"simple-modal-title\">Mint New Block!</h2>\n      <p id=\"simple-modal-description\">\n\n        You will get the next available block. \n      </p><p>\n        Current expected position:\n\n      </p><p>\n        Col: 0,\n      </p><p>\n        Row: 0\n      </p>\n      <button>MINT NEXT AVAILABLE BLOCK</button>\n      <p>\n        Current contents:\n        \n        <AnsiImageRender style={{fontSize: 24, lineHeight: '24px', width: 270 }} tokenURI={\"tna1.ans\"} />\n      </p><p>\n        Choose .ans file to save into your chosen block:\n        <input type=\"file\" id=\"input\" onChange={(evt) => processFile(evt.target.files[0]) } />\n      </p><p>\n        { fileObjectUrl }\n        { selectedFileState.fileObjectUrl && \n        <AnsiImageRender style={{fontSize: 24, lineHeight: '24px', width: 270, height: 270, overflow: 'scroll' }} tokenURI={selectedFileState.fileObjectUrl} /> }\n      </p><p>\n      { selectedFileState.file && <button onClick={() => uploadFileAndProceed()}>Proceed</button> }\n        <p>{selectedFileState.userMessage}</p>\n      </p>\n    </div>\n  );\n\n  return (\n    <div>\n      <button type=\"button\" onClick={handleOpen}>\n        Manage Blocks / Mint &amp; Write / CLICK ME TO OPEN DIALOG\n      </button>\n      <Modal\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"simple-modal-title\"\n        aria-describedby=\"simple-modal-description\"\n      >\n        {body}\n      </Modal>\n    </div>\n  );\n}\n\n// copied from ansi\nconst useStyles = makeStyles((theme) => ({\n    root: {\n          flexGrow: 1,\n        },\n    paper: {\n          padding: theme.spacing(2),\n          textAlign: 'center',\n          color: theme.palette.text.secondary,\n        },\n}));\n\nfunction RecentlySavedBlocks({limit}) {\n  const [newFilterAddress, setNewFilterAddress] = useState();\n  const classes = useStyles();\n  let ansiFileNames = [\n    'tna1.ans',\n    'tna2.ans',\n    'tna3.ans',\n    'tna4.ans',\n    /*\n    'Shion%20in%20Monster%20World.ans',\n    'TestPattern%20ANSI.ans',\n    'Tetris.ans',\n    */\n  ];\n  //let ansiUriArr = ansiFileNames.map(a => ({name: a, path: 'https://raw.githubusercontent.com/PhMajerus/ANSI-art/master/' + a}));\n  let ansiUriArr = ansiFileNames.map(a => ({name: a, path: '/' + a}));\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={3}>\n        <Grid item xs={8}>\n          <AnsiImageRender style={{fontSize: 24, lineHeight: '24px', paddingBottom: 20, width: '100%', color: 'white' /* XXX bug because color should be white by ansi code */  }} tokenURI={'/ansi-bbs1.ans'} />\n        </Grid>\n        <Grid item xs={3}>\n          <AnsiImageRender style={{fontSize: 8, lineHeight: '8px', color: 'white' }} tokenURI={'/connect-metamask.ans'} />\n          <button>Connect Metamask</button>\n          <div><span>Connected address: 0x1234...5678</span></div>\n        </Grid>\n      </Grid>\n      <Grid container spacing={3}>\n        <Grid item xs={8} style={{backgroundColor:\"black\"}}>\n          <AnsiImageRender style={{fontSize: 18, lineHeight: '18px', paddingLeft: 30, height: 650, width: 800, color: 'white' /* XXX bug because color should be white by ansi code */  }} tokenURI={'/info.ans'} />\n        </Grid>\n        <Grid item xs={3}>\n          <div><span>Last known minted block at index 679.</span></div>\n          <div><span>Mint cost for next block: 0.00125 MATIC</span></div>\n          <MakeBlockModal />\n        </Grid>\n        <div style={{border: '1px solid black'}}>\n          <h2 style={{fontFamily: '\"Roboto\", sans-serif', fontSize: '4em', textAlign: 'left', fontWeight: 800}} className='foobar'>Recently Saved Blocks ({limit})</h2>\n          <Input\n            onChange={e => {\n              setNewFilterAddress(e.target.value);\n            }}\n          />\n          <Button\n            style={{ marginTop: 8 }}\n            onClick={async () => { console.log('TODO filter by address') }}\n          >Filter Blocks by Address\n          </Button>\n          <Button\n            style={{ marginTop: 8 }}\n            onClick={async () => { console.log('TODO filter by address') }}\n          >Filter Blocks by My Address\n          </Button>\n          <Grid container spacing={3,0} >\n\n            {'tna1.ans|tna2.ans|tnb1.ans|tnb2.ans'.split('|').map((uri, i) => (\n                    <div key={\"ansi1-\" + i} className=\"ansi-wrapper\" style={{maxWidth: 400}}>\n                      <AnsiImageRender style={{fontSize: 24, lineHeight: '24px', width: 270 }} tokenURI={uri} />\n                    </div>\n            ))}\n          </Grid><Grid container spacing={3,0} >\n            {'tna3.ans|tna4.ans|tnb3.ans|tnb4.ans'.split('|').map((uri, i) => (\n                    <div key={\"ansi1-\" + i} className=\"ansi-wrapper\" style={{maxWidth: 400}}>\n                      <AnsiImageRender style={{fontSize: 24, lineHeight: '24px', width: 270 }} tokenURI={uri} />\n                    </div>\n            ))}\n            {ansiUriArr.map((uri, i) => (\n                <Grid key={\"ansi2-\" + i} item xs style={{backgroundColor:\"black\"}}>\n                  <Paper className={classes.paper}>\n                    <div className=\"ansi-wrapper\" style={{maxWidth: 400}}>\n                      <AnsiImageRender style={{fontSize: 24, lineHeight: '24px', height: 240, width: 320 }} tokenURI={uri.path} />\n                    </div>\n                    <h3>FILE: {uri.name}</h3>\n                    <ul><li>Row: 66</li><li>Col: 6</li><li>Owner: 0x92928...13812313</li></ul>\n                  </Paper>\n                </Grid>\n            ))}\n\n          </Grid>\n        </div>\n      </Grid>\n    </div>\n  )\n}\nfunction AutoGrid() {\n  return '';\n  const classes = useStyles();\n  const classBreadcrumbListItem = {\n              display: 'inline-block',\n              marginBottom: 0,\n              marginRight: 0,\n              fontSize: '1.25rem',\n              fontWeight: 400,\n    };\n  const stylesBreadcrumbList = { padding: 0, margin: 0, textAlign: 'left' };\n\n  let ansis = [ 'crop-MAX_MOUSE-HYPERNODEC-0.png', 'crop-MAX_MOUSE-HYPERNODEC-4.png', 'crop-ZII-TNA-0.png', 'crop-ZII-TNA-1.png', 'crop-ZII-TNA-7.png', 'crop-arl-xdiff-2.png' ];\n  ansis = [ 'crop16-MAX_MOUSE-HYPERNODEC-17.png', 'crop16-MAX_MOUSE-HYPERNODEC-33.png', 'crop16-arl-xdiff-20.png', 'crop16-arl-xdiff-4.png', 'crop16-arl-xdiff-8.png', \n    'crop16-illusion-5.png', \n    'crop16-illusion-9.png', \n    'crop16-illusion-13.png', \n  ];\n  // https://raw.githubusercontent.com/PhMajerus/ANSI-art/master/Super%20Mario%20castle%20(wide)%20(256%20colors).ans\n  let ansiFileNames = ['256%20colors%20swatches%20(UTF-8).txt',\n    '256%20colors%20swatches.ans',\n    'Apple%20II%20(80x25).ans',\n    'Apple%20II.ans',\n    'Apple%20Macintosh.ans',\n    'Arecibo%20message.ans',\n    'Arkanoid.ans',\n    'Breakout.ans',\n    'CatChum%20(ASCII).txt',\n    'CatChum.ans',\n    'Commodore%2064%20(80x25).ans',\n    'Commodore%2064.ans',\n    'Frogger%20(small).ans',\n    'GW-Basic%20(UTF-8).txt',\n    'Gold%20medal.ans',\n    'IBM%20PC%20(80x25).ans',\n    'IBM%20PC%20startup%20screen%20(80x25).ans',\n    'IBM%20PC.ans',\n    'IBM%20PCjr%20startup%20screen%20(40x25).ans',\n    'IBM%20PCjr%20startup%20screen%20(80x25%20UTF-8%20double-width%20text).txt',\n    'IBM%20PCjr%20startup%20screen%20(80x25).ans',\n    'Lode%20Runner.ans',\n    'Lxss%20banner.ans',\n    'Lxss-VTArt-Blue.txt',\n    'Lxss-VTArt-Red.txt',\n    'MITS%20Altair%208800.ans',\n    'Mario%20Bros.%20(small).ans',\n    'Mario%20Bros.%20(wide).ans',\n    'MiniColorsWheel.ans',\n    'Monopoly%20board.ans',\n    'Morse%20Code.ans',\n    'Pac-Man%20(80x25).ans',\n    'Pac-Man%20(UTF-8).txt',\n    'Pac-Man.ans',\n    'Pitfall!.ans',\n    'QBasic%20(UTF-8).txt',\n    'Sega%20Snail%20Maze%20(UTF-8%20double-width%20text).txt',\n    'Sega%20Snail%20Maze%20(UTF-8).txt',\n    'Sega%20Snail%20Maze.ans',\n    'Shion%20in%20Monster%20World.ans',\n    'Sinclair%20ZX-Spectrum.ans',\n    'Sonic%20Green%20Hill%20Zone%20(256%20colors).ans',\n    'Sonic%20Green%20Hill%20Zone.ans',\n    'Super%20Mario%20castle%20(narrow).ans',\n    'Super%20Mario%20castle%20(wide)%20(256%20colors).ans',\n    'Super%20Mario%20castle%20(wide).ans',\n    'TestPattern%2024-bit.ans',\n    'TestPattern%20ANSI.ans',\n    'Tetris.ans',\n    'USA%20flag.ans',\n    'Visual%20Basic%20for%20DOS%20(UTF-8).txt',\n    'WSL%20logo%20(UTF-8).txt',\n    'Win10%20PowerToys.ans',\n    'Win10%20wallpaper.ans',\n    'Win10%20wallpaper.txt',\n    'Windows%201%20(UTF-8).txt',\n    'Windows%201.asc',\n    'Windows%2010.asc',\n    'Windows%20Terminal.ans'];\n  // let ansiUriArr = ansiFileNames.map(a => 'https://raw.githubusercontent.com/PhMajerus/ANSI-art/master/' + a);\n  let ansiUriArr = ansiFileNames.map(a => ({name: a, path: 'https://raw.githubusercontent.com/PhMajerus/ANSI-art/master/' + a}));\n\n  // XXX PUBLIC_URL not set, hard code as root\n  // var obj = {counter: 1};\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={3}>\n        <div style={{border: '1px solid black'}}>\n          <h2 style={{fontFamily: '\"Roboto\", sans-serif', fontSize: '4em', textAlign: 'left', fontWeight: 800}} className='foobar'>ANSi Portfolio Blockception</h2>\n          <div className=\"container\"><div className=\"row\"><div className=\"col-12\">\n            <ul id=\"breadcrumbs\" className=\"breadcrumb-list\" style={stylesBreadcrumbList}\n          >\n              <li className=\"breadcrumb-list-item\" style={classBreadcrumbListItem}>Home</li>\n              <li className=\"breadcrumb-list-item breadcrumb-sep\" style={{...classBreadcrumbListItem, padding: '0.66667rem'}}>/</li>\n              <li className=\"breadcrumb-list-item current\" style={classBreadcrumbListItem} >Portfolio 3 Columns</li>\n            </ul>\n          </div></div></div>\n          \n          <img width=\"33%\" src={\"/\" + ansis[2]} />\n          <img width=\"33%\" src={\"/\" + ansis[3]} />\n          <img width=\"33%\" src={\"/\" + ansis[5]} />\n          <img width=\"33%\" src={\"/\" + ansis[0]} />\n          <img width=\"33%\" src={\"/\" + ansis[4]} />\n          <img width=\"33%\" src={\"/\" + ansis[6]} />\n          <img width=\"33%\" src={\"/\" + ansis[1]} />\n          <img width=\"33%\" src={\"/\" + ansis[3]} />\n          <img width=\"33%\" src={\"/\" + ansis[7]} />\n        </div>\n      </Grid>\n      <Grid container spacing={3} style={{border: '1px solid black', padding: 10}}>\n        <Grid item xs={3}>\n          <img width=\"100%\" src={\"/\" + ansis[0]} />\n          <Paper className={classes.paper}>\n          xs\n            <h3>FN-EXAM.ANS</h3>\n            <ul><li>(66, 6)</li><li>0x9292813812313</li></ul>\n          </Paper>\n        </Grid>\n        <Grid item xs={3}>\n          <img width=\"100%\" src={\"/\" + ansis[1]} />\n          <Paper className={classes.paper}>xs\n            <h3>FN-EXAM.ANS</h3>\n            <ul><li>(66, 6)</li><li>0x9292813812313</li></ul>\n          </Paper>\n        </Grid>\n        <Grid item xs={3}>\n          <img width=\"100%\" src={\"/\" + ansis[2]} />\n          <Paper className={classes.paper}>xs\n            <h3>FN-EXAM.ANS</h3>\n            <ul><li>(66, 6)</li><li>0x9292813812313</li></ul>\n          </Paper>\n        </Grid>\n        <Grid item xs>\n          <img width=\"100%\" src={\"/\" + ansis[3]} />\n          <Paper className={classes.paper}>xs\n            <h3>FN-EXAM.ANS</h3>\n            <ul><li>(66, 6)</li><li>0x9292813812313</li></ul>\n          </Paper>\n        </Grid>\n        <Grid item xs={6}>\n          <img width=\"100%\" src={\"/\" + ansis[4]} />\n          <Paper className={classes.paper}>xs\n            <h3>FN-EXAM.ANS</h3>\n            <ul><li>(66, 6)</li><li>0x9292813812313</li></ul>\n          </Paper>\n        </Grid>\n        <Grid item xs>\n          <img width=\"100%\" src={\"/\" + ansis[5]} />\n          <Paper className={classes.paper}>xs\n            <h3>FN-EXAM.ANS</h3>\n            <ul><li>(66, 6)</li><li>0x9292813812313</li></ul>\n          </Paper>\n        </Grid>\n\n        {/* {ansiUriArr.map(uri => (\n          <Grid item xs>\n              <AnsiImageRender tokenURI={uri.path} />\n            <Paper className={classes.paper}>xs\n              <h3>{uri.name.replaceAll('%20', ' ')}</h3>\n            </Paper>\n\n          </Grid>\n        ))} */}\n        \n      </Grid>\n\n      \n      <Grid container spacing={3,0} >\n\n        {ansiUriArr.map((uri, i) => (\n            <Grid key={\"autogrid-ansi-\" + i} item xs style={{backgroundColor:\"black\"}}>\n              <AnsiImageRender tokenURI={uri.path} />\n            </Grid>\n        ))}\n\n      </Grid>\n      \n      \n    </div>\n  );\n}\n\n\nexport default function ExampleUI({\n  myBBlocksCount,\n  my1stBBlockTokenId,\n  my1stBBlockTokenURI,\n  purpose,\n  setPurposeEvents,\n  address,\n  mainnetProvider,\n  localProvider,\n  yourLocalBalance,\n  price,\n  tx,\n  readContracts,\n  writeContracts,\n}) {\n  const [newPurpose, setNewPurpose] = useState(\"loading...\");\n  const [newTokenURI, setNewTokenURI] = useState(\"loading...\");\n\n  return (\n    <div>\n      {/*\n        ⚙️ Here is an example UI that displays and sets the purpose in your smart contract:\n      */}\n      <div style={{ border: \"1px solid #cccccc\", padding: 16, /*width: 400,*/ margin: \"auto\", marginTop: 64 }}>\n        <h2>Bulletin Block System Permissionless Distributed UI:</h2>\n        {/* <h4>purpose: {purpose}</h4> */}\n        <Divider />\n        <RecentlySavedBlocks limit={3} />\n        <Divider />\n        <div style={{ margin: 8 }}>\n          <div>I own {myBBlocksCount ? myBBlocksCount.toString() : 0} bBlocks</div>\n          <div>\n            <h3>Here's your 1st (if &gt; 0) tokenId</h3>\n            <div>{ my1stBBlockTokenId ? my1stBBlockTokenId.toString() : 'nada' }</div>\n            <div>{ my1stBBlockTokenURI ? my1stBBlockTokenURI : 'nada' }</div>\n\n\n          </div>\n          <Button\n            style={{ marginTop: 8 }}\n            onClick={async () => {\n              /* look how you call setPurpose on your contract: */\n              /* notice how you pass a call back for tx updates too */\n              const result = tx(writeContracts.YourContract.mint(), update => {\n                console.log(\"📡 Transaction Update:\", update);\n                if (update && (update.status === \"confirmed\" || update.status === 1)) {\n                  console.log(\" 🍾 Transaction \" + update.hash + \" finished!\");\n                  console.log(\n                    \" ⛽️ \" +\n                    update.gasUsed +\n                    \"/\" +\n                    (update.gasLimit || update.gas) +\n                    \" @ \" +\n                    parseFloat(update.gasPrice) / 1000000000 +\n                    \" gwei\",\n                  );\n                }\n              });\n              console.log(\"awaiting metamask/web3 confirm result...\", result);\n              console.log(await result);\n            }}\n          >\n            Mint!\n          </Button>\n          <Input\n            onChange={e => {\n              setNewTokenURI(e.target.value);\n            }}\n          />\n          <Button\n            style={{ marginTop: 8 }}\n            onClick={async () => {\n              /* look how you call setPurpose on your contract: */\n              /* notice how you pass a call back for tx updates too */\n              const result = tx(writeContracts.YourContract.setTokenURI(my1stBBlockTokenId, newTokenURI), update => {\n                console.log(\"📡 Transaction Update:\", update);\n                if (update && (update.status === \"confirmed\" || update.status === 1)) {\n                  console.log(\" 🍾 Transaction \" + update.hash + \" finished!\");\n                  console.log(\n                    \" ⛽️ \" +\n                    update.gasUsed +\n                    \"/\" +\n                    (update.gasLimit || update.gas) +\n                    \" @ \" +\n                    parseFloat(update.gasPrice) / 1000000000 +\n                    \" gwei\",\n                  );\n                }\n              });\n              console.log(\"awaiting metamask/web3 confirm result...\", result);\n              console.log(await result);\n            }}\n          >\n            Set your 1st tokenURI !\n          </Button>\n          <AutoGrid />\n          <Input\n            onChange={e => {\n              setNewPurpose(e.target.value);\n            }}\n          />\n          <Button\n            style={{ marginTop: 8 }}\n            onClick={async () => {\n              await nftsTestStoreString(newPurpose);\n              if (false) {\n              /* look how you call setPurpose on your contract: */\n              /* notice how you pass a call back for tx updates too */\n              const result = tx(writeContracts.YourContract.setPurpose(newPurpose), update => {\n                console.log(\"📡 Transaction Update:\", update);\n                if (update && (update.status === \"confirmed\" || update.status === 1)) {\n                  console.log(\" 🍾 Transaction \" + update.hash + \" finished!\");\n                  console.log(\n                    \" ⛽️ \" +\n                    update.gasUsed +\n                    \"/\" +\n                    (update.gasLimit || update.gas) +\n                    \" @ \" +\n                    parseFloat(update.gasPrice) / 1000000000 +\n                    \" gwei\",\n                  );\n                }\n              });\n              console.log(\"awaiting metamask/web3 confirm result...\", result);\n              console.log(await result);\n              }\n            }}\n          >\n            Test nft.storage description [Set Purpose]!\n          </Button>\n        </div>\n        <Divider />\n        Your Address:\n        <Address address={address} ensProvider={mainnetProvider} fontSize={16} />\n        <Divider />\n        ENS Address Example:\n        <Address\n          address=\"0x34aA3F359A9D614239015126635CE7732c18fDF3\" /* this will show as austingriffith.eth */\n          ensProvider={mainnetProvider}\n          fontSize={16}\n        />\n        <Divider />\n        {/* use utils.formatEther to display a BigNumber: */}\n        <h2>Your Balance: {yourLocalBalance ? utils.formatEther(yourLocalBalance) : \"...\"}</h2>\n        <div>OR</div>\n        <Balance address={address} provider={localProvider} price={price} />\n        <Divider />\n        <div>🐳 Example Whale Balance:</div>\n        <Balance balance={utils.parseEther(\"1000\")} provider={localProvider} price={price} />\n        <Divider />\n        {/* use utils.formatEther to display a BigNumber: */}\n        <h2>Your Balance: {yourLocalBalance ? utils.formatEther(yourLocalBalance) : \"...\"}</h2>\n        <Divider />\n        Your Contract Address:\n        <Address\n          address={readContracts && readContracts.YourContract ? readContracts.YourContract.address : null}\n          ensProvider={mainnetProvider}\n          fontSize={16}\n        />\n        <Divider />\n        <div style={{ margin: 8 }}>\n          <Button\n            onClick={() => {\n              /* look how you call setPurpose on your contract: */\n              tx(writeContracts.YourContract.setPurpose(\"🍻 Cheers\"));\n            }}\n          >\n            Set Purpose to &quot;🍻 Cheers&quot;\n          </Button>\n        </div>\n        <div style={{ margin: 8 }}>\n          <Button\n            onClick={() => {\n              /*\n              you can also just craft a transaction and send it to the tx() transactor\n              here we are sending value straight to the contract's address:\n            */\n              tx({\n                to: writeContracts.YourContract.address,\n                value: utils.parseEther(\"0.001\"),\n              });\n              /* this should throw an error about \"no fallback nor receive function\" until you add it */\n            }}\n          >\n            Send Value\n          </Button>\n        </div>\n        <div style={{ margin: 8 }}>\n          <Button\n            onClick={() => {\n              /* look how we call setPurpose AND send some value along */\n              tx(\n                writeContracts.YourContract.setPurpose(\"💵 Paying for this one!\", {\n                  value: utils.parseEther(\"0.001\"),\n                }),\n              );\n              /* this will fail until you make the setPurpose function payable */\n            }}\n          >\n            Set Purpose With Value\n          </Button>\n        </div>\n        <div style={{ margin: 8 }}>\n          <Button\n            onClick={() => {\n              /* you can also just craft a transaction and send it to the tx() transactor */\n              tx({\n                to: writeContracts.YourContract.address,\n                value: utils.parseEther(\"0.001\"),\n                data: writeContracts.YourContract.interface.encodeFunctionData(\"setPurpose(string)\", [\n                  \"🤓 Whoa so 1337!\",\n                ]),\n              });\n              /* this should throw an error about \"no fallback nor receive function\" until you add it */\n            }}\n          >\n            Another Example\n          </Button>\n        </div>\n      </div>\n\n      {/*\n        📑 Maybe display a list of events?\n          (uncomment the event and emit line in YourContract.sol! )\n      */}\n      <div style={{ width: 600, margin: \"auto\", marginTop: 32, paddingBottom: 32 }}>\n        <h2>Events:</h2>\n        <List\n          bordered\n          dataSource={setPurposeEvents}\n          renderItem={item => {\n            return (\n              <List.Item key={item.blockNumber + \"_\" + item.sender + \"_\" + item.purpose}>\n                <Address address={item[0]} ensProvider={mainnetProvider} fontSize={16} />\n                {item[1]}\n              </List.Item>\n            );\n          }}\n        />\n      </div>\n\n      <div style={{ width: 600, margin: \"auto\", marginTop: 32, paddingBottom: 256 }}>\n        <Card>\n          Check out all the{\" \"}\n          <a\n            href=\"https://github.com/austintgriffith/scaffold-eth/tree/master/packages/react-app/src/components\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            📦 components\n          </a>\n        </Card>\n\n        <Card style={{ marginTop: 32 }}>\n          <div>\n            There are tons of generic components included from{\" \"}\n            <a href=\"https://ant.design/components/overview/\" target=\"_blank\" rel=\"noopener noreferrer\">\n              🐜 ant.design\n            </a>{\" \"}\n            too!\n          </div>\n\n          <div style={{ marginTop: 8 }}>\n            <Button type=\"primary\">Buttons</Button>\n          </div>\n\n          <div style={{ marginTop: 8 }}>\n            <SyncOutlined spin /> Icons\n          </div>\n\n          <div style={{ marginTop: 8 }}>\n            Date Pickers?\n            <div style={{ marginTop: 2 }}>\n              <DatePicker onChange={() => { }} />\n            </div>\n          </div>\n\n          <div style={{ marginTop: 32 }}>\n            <Slider range defaultValue={[20, 50]} onChange={() => { }} />\n          </div>\n\n          <div style={{ marginTop: 32 }}>\n            <Switch defaultChecked onChange={() => { }} />\n          </div>\n\n          <div style={{ marginTop: 32 }}>\n            <Progress percent={50} status=\"active\" />\n          </div>\n\n          <div style={{ marginTop: 32 }}>\n            <Spin />\n          </div>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","import { SyncOutlined } from \"@ant-design/icons\";\nimport { utils } from \"ethers\";\nimport { Button, Card, DatePicker, Divider, Input, List, Progress, Slider, Spin, Switch } from \"antd\";\nimport React, { useState } from \"react\";\nimport { Address, Balance } from \"../components\";\nimport AnsiImageRender from \"./AnsiImageRender\"\n\n//import Button from \"@material-ui/core/Button\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\n\n// copied from ansi\nconst useStyles = makeStyles((theme) => ({\n    root: {\n          flexGrow: 1,\n        },\n    paper: {\n          padding: theme.spacing(2),\n          textAlign: 'center',\n          color: theme.palette.text.secondary,\n        },\n}));\n\nfunction RecentlySavedBlocks({limit}) {\n  const [newFilterAddress, setNewFilterAddress] = useState();\n}\n\nexport default function About({\n  myBBlocksCount,\n  my1stBBlockTokenId,\n  my1stBBlockTokenURI,\n  purpose,\n  setPurposeEvents,\n  address,\n  mainnetProvider,\n  localProvider,\n  yourLocalBalance,\n  price,\n  tx,\n  readContracts,\n  writeContracts,\n}) {\n  const [newPurpose, setNewPurpose] = useState(\"loading...\");\n  const [newTokenURI, setNewTokenURI] = useState(\"loading...\");\n\n  return (\n    <div>\n      {/*\n        ⚙️ Here is an example UI that displays and sets the purpose in your smart contract:\n      */}\n      <div style={{ border: \"1px solid #cccccc\", padding: 16, /*width: 400,*/ margin: \"auto\", marginTop: 64 }}>\n        <h2>Bulletin Block System Permissionless Distributed UI:</h2>\n\n        <Grid container spacing={3}>\n          <Grid item xs={8}>\n            <AnsiImageRender style={{fontSize: 24, lineHeight: '24px', paddingBottom: 20, width: '100%', color: 'white' /* XXX bug because color should be white by ansi code */  }} tokenURI={'/ansi-bbs1.ans'} />\n          </Grid>\n        </Grid>\n        <Grid container spacing={3}>\n          <Grid item xs={8} style={{backgroundColor:\"black\"}}>\n            <AnsiImageRender style={{fontSize: 18, lineHeight: '18px', paddingLeft: 30, height: 650, width: 800, color: 'white' /* XXX bug because color should be white by ansi code */  }} tokenURI={'/info.ans'} />\n          </Grid>\n        </Grid>\n      </div>\n    </div>\n  );\n}\n","import { SyncOutlined } from \"@ant-design/icons\";\nimport { utils } from \"ethers\";\nimport { Button, Card, DatePicker, Divider, Input, List, Progress, Slider, Spin, Switch } from \"antd\";\nimport React, { useState } from \"react\";\nimport {\n  useBalance,\n  useContractLoader,\n  useContractReader,\n  useEventListener,\n  useExchangePrice,\n  useGasPrice,\n  useOnBlock,\n  useUserSigner,\n} from \"../hooks\";\nimport { Address, Balance } from \"../components\";\nimport AnsiImageRender from \"./AnsiImageRender\"\n\n//import Button from \"@material-ui/core/Button\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Modal from '@material-ui/core/Modal';\n\nconst { ethers } = require(\"ethers\");\nimport { NFTStorage, File } from 'nft.storage';\nimport { StoreFileOnIPFS } from \"../helpers\";\n\nconst nftStorageApiKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkaWQ6ZXRocjoweDQzYjgwMzQ4MzY1MWE4MDE5MjU5NzQ2MjY5ZjM1ZDI4NUMzMEJlQjkiLCJpc3MiOiJuZnQtc3RvcmFnZSIsImlhdCI6MTYyODE1NzYxNTc3NCwibmFtZSI6ImtleTEifQ.G9BNydhDBxYJqYr06xSW-hRbkj5AptqaijFokHPx3h0';\nconst nftsClient = new NFTStorage({ token: nftStorageApiKey })\n\nasync function nftsTestStoreString(s) {\n  const metadata = await nftsClient.store({\n    name: 'nft.storage store test',\n    description: 'Description: ' + s,\n    image: new File(['<DATA>'], 'notansi.jpg', { type: 'image/jpg' }),\n    //image: new Blob('XXX'),\n    properties: {\n      custom: 'Custom data can appear here, files are auto uploaded.',\n      //file: new File(['<DATA>'], 'README.md', { type: 'text/plain' }),\n      file: new File([new Blob(['this is a blob', 'by tomo'])], 'README.md', { type: 'text/plain' }),\n    }\n  })\n\n  console.log('IPFS URL for the metadata:', metadata.url)\n  console.log('metadata.json contents:\\n', metadata.data)\n  console.log('metadata.json with IPFS gateway URLs:\\n', metadata.embed())\n}\n\n\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\nconst useModalStyles = makeStyles((theme) => ({\n  paper: {\n    position: 'absolute',\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\nfunction MakeBlockModal() {\n\n  const classes = useModalStyles();\n  // getModalStyle is not a pure function, we roll the style only on the first render\n  const [modalStyle] = React.useState(getModalStyle);\n  const [open, setOpen] = React.useState(false);\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const body = (\n    <div style={modalStyle} className={classes.paper}>\n      <h2 id=\"simple-modal-title\">Mint New Block!</h2>\n      <p id=\"simple-modal-description\">\n\n        You will get the next available block. \n      </p><p>\n        Current expected position:\n\n      </p><p>\n        Col: 0,\n      </p><p>\n        Row: 0\n      </p>\n      <button>MINT NEXT AVAILABLE BLOCK</button>\n      <p>\n        Current contents:\n        \n        <AnsiImageRender style={{fontSize: 24, lineHeight: '24px', width: 270 }} tokenURI={\"tna1.ans\"} />\n      </p><p>\n        Choose .ans file to save into your chosen block:\n        <input type=\"file\" id=\"input\" onChange={(evt) => console.log(\"event: \", evt, \"selected file: \", evt.target.files[0])} />\n      </p><p>\n        A preview of your ANSi will appear here\n      </p><p>\n        TODO: <button>TEST FILE UPLOAD</button>\n      </p>\n    </div>\n  );\n\n  return (\n    <div>\n      <button type=\"button\" onClick={handleOpen}>\n        Manage Blocks / Mint &amp; Write / CLICK ME TO OPEN DIALOG\n      </button>\n      <Modal\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"simple-modal-title\"\n        aria-describedby=\"simple-modal-description\"\n      >\n        {body}\n      </Modal>\n    </div>\n  );\n}\n\nfunction ShowUpdateTokenUriModalDialog({ tx, writeContracts, tokenId, isDefaultOpen, hideButton, onClose }) {\n\n  isDefaultOpen = isDefaultOpen == undefined ? false : isDefaultOpen;\n  const classes = useModalStyles();\n  // getModalStyle is not a pure function, we roll the style only on the first render\n  const [modalStyle] = React.useState(getModalStyle);\n  const [open, setOpen] = React.useState(isDefaultOpen);\n  const [selectedFileState, setSelectedFileState] = React.useState({});\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n    if (onClose) {\n      onClose();\n    };\n  };\n\n  var file;\n  var fileObjectUrl;\n  const processFile = (f) => {\n    console.log('file selected', f);\n    file = f;\n    const reader = new FileReader();\n    fileObjectUrl = window.URL.createObjectURL(f);\n    let userMessage = 'File selected'\n    let fileState = 'SELECTED';\n    setSelectedFileState({ file, fileObjectUrl, userMessage, fileState });\n  }\n\n  const uploadFileAndProceed = async () => {\n    let fileState = 'UPLOADING';\n    let userMessage = 'Please wait. File is being uploaded to IPFS...';\n    setSelectedFileState({ ...selectedFileState, userMessage, fileState })\n    let metadata = await StoreFileOnIPFS('name', 'description', undefined, selectedFileState.file);\n    userMessage = 'Approve transaction to change the token image to the newly uploaded image';\n    fileState = 'UPLOADED';\n    setSelectedFileState({ ...selectedFileState, metadata, userMessage, fileState });\n\n    const result = await tx(writeContracts.BBoard.addContentToBBlock(tokenId, metadata.url), update => {\n      console.log(\"📡 Transaction Update:\", update);\n      if (update && (update.status === \"confirmed\" || update.status === 1)) {\n        console.log(\" 🍾 Transaction \" + update.hash + \" finished!\");\n        console.log(\n          \" ⛽️ \" +\n          update.gasUsed +\n          \"/\" +\n          (update.gasLimit || update.gas) +\n          \" @ \" +\n          parseFloat(update.gasPrice) / 1000000000 +\n          \" gwei\",\n        );\n      }\n    });\n\n    userMessage = 'Image has been updated';\n    fileState = 'APPROVED';\n    setSelectedFileState({ ...selectedFileState, metadata, userMessage, fileState });\n    handleClose();\n  }\n\n  const body = (\n    <div style={modalStyle} className={classes.paper}>\n      <h3>Change token image for Token Id: {tokenId}</h3>\n      <p>Upload your new ANSI file here.</p>\n      <p>The file will be uploaded to IPFS. This might take a while, please wait for it complete.</p>\n      <p>You will be prompted to Approve a transaction once the file is uploaded. This is to update the new ipfs url into your token contract.</p>\n      <p>Approve the transaction when the prompt is shown.</p>\n      <p>\n        <input type=\"file\" id=\"input\" onChange={(evt) => processFile(evt.target.files[0])} />\n      </p><p>\n        {fileObjectUrl}\n        {selectedFileState.fileObjectUrl &&\n          <AnsiImageRender style={{ fontSize: 24, lineHeight: '24px', width: 270, height: 270, overflow: 'scroll' }} tokenURI={selectedFileState.fileObjectUrl} />}\n      </p><p>\n        {selectedFileState.fileState == 'SELECTED' && selectedFileState.file && <button onClick={() => uploadFileAndProceed()}>Upload</button>}\n        {selectedFileState.fileState == 'UPLOADING' && <Spin />}\n        <p>{selectedFileState.userMessage}</p>\n      </p>\n    </div>\n  );\n\n  return (\n    <div>\n      {!hideButton &&\n        <button type=\"button\" onClick={handleOpen}>\n          Change ANSi file\n        </button>\n      }\n      <Modal\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"simple-modal-title\"\n        aria-describedby=\"simple-modal-description\"\n      >\n        {body}\n      </Modal>\n    </div>\n  );\n}\n\n// copied from ansi\nconst useStyles = makeStyles((theme) => ({\n    root: {\n          flexGrow: 1,\n        },\n    sectionH2: {\n          fontFamily: '\"Roboto\", sans-serif', fontSize: '4em', textAlign: 'center', fontWeight: 800\n    },\n    paper: {\n          padding: theme.spacing(2),\n          textAlign: 'center',\n          color: theme.palette.text.secondary,\n          backgroundColor: 'lemonchiffon',\n          margin: 20,\n          border: '2px solid black',\n          boxShadow: '8px 8px 0px 0',\n        },\n}));\n\nfunction MainScroll() {\n  const classes = useStyles();\n  // TODO fetch blocks from contract and render\n  return (\n    <div className={classes.root}>\n      <Grid container justifyContent=\"center\">\n        <div style={{padding: '5em'}}>\n          <h2 className={classes.sectionH2}>Genesis Scroll</h2>\n          <div className=\"ansi-grid-wrapper\" style={{color: 'white', backgroundColor: 'black'}}>\n            <Grid container >\n              {'bbs1.ans|bbs2.ans|bbs3.ans|info1.txt'.split('|').map((uri, i) => (\n                      <div key={\"ansi1-\" + i} className=\"ansi-wrapper\" style={{maxWidth: 400}}>\n                        <AnsiImageRender style={{fontSize: 24, lineHeight: '24px', width: 270 }} tokenURI={uri} />\n                      </div>\n              ))}\n            </Grid><Grid container spacing={3,0} >\n              {'bbs4.ans|bbs5.ans|bbs6.ans|info2.txt'.split('|').map((uri, i) => (\n                      <div key={\"ansi1-\" + i} className=\"ansi-wrapper\" style={{maxWidth: 400}}>\n                        <AnsiImageRender style={{fontSize: 24, lineHeight: '24px', width: 270 }} tokenURI={uri} />\n                      </div>\n              ))}\n            </Grid><Grid container spacing={3,0} >\n              {'tna1.ans|tna2.ans|tnb1.ans|info3.txt'.split('|').map((uri, i) => (\n                      <div key={\"ansi1-\" + i} className=\"ansi-wrapper\" style={{maxWidth: 400}}>\n                        <AnsiImageRender style={{fontSize: 24, lineHeight: '24px', width: 270 }} tokenURI={uri} />\n                      </div>\n              ))}\n            </Grid><Grid container spacing={3,0} >\n              {'tna3.ans|tna4.ans|tnb3.ans|tnb4.ans'.split('|').map((uri, i) => (\n                      <div key={\"ansi1-\" + i} className=\"ansi-wrapper\" style={{maxWidth: 400}}>\n                        <AnsiImageRender style={{fontSize: 24, lineHeight: '24px', width: 270 }} tokenURI={uri} />\n                      </div>\n              ))}\n            </Grid><Grid container spacing={3,0} >\n              {'tna1.ans|tna2.ans|tnb1.ans|tnb2.ans'.split('|').map((uri, i) => (\n                      <div key={\"ansi1-\" + i} className=\"ansi-wrapper\" style={{maxWidth: 400}}>\n                        <AnsiImageRender style={{fontSize: 24, lineHeight: '24px', width: 270 }} tokenURI={uri} />\n                      </div>\n              ))}\n            </Grid><Grid container spacing={3,0} >\n              {'tna1.ans|tna2.ans|tnb1.ans|tnb2.ans'.split('|').map((uri, i) => (\n                      <div key={\"ansi1-\" + i} className=\"ansi-wrapper\" style={{maxWidth: 400}}>\n                        <AnsiImageRender style={{fontSize: 24, lineHeight: '24px', width: 270 }} tokenURI={uri} />\n                      </div>\n              ))}\n            </Grid>\n          </div>\n        </div>\n      </Grid>\n      <Grid container spacing={3}>\n        <Grid item>\n          <p>\n            <a href=\"#\">View more...</a>\n          </p>\n        </Grid>\n      </Grid>\n    </div>\n  )\n}\nfunction RecentlySavedBlocks({limit}) {\n  const classes = useStyles();\n  let ansiFileNames = [\n    'tna1.ans',\n    'tna2.ans',\n    'tna3.ans',\n    'tna4.ans',\n    'tna4.ans',\n    'tna4.ans',\n    /*\n    'Shion%20in%20Monster%20World.ans',\n    'TestPattern%20ANSI.ans',\n    'Tetris.ans',\n    */\n  ];\n  //let ansiUriArr = ansiFileNames.map(a => ({name: a, path: 'https://raw.githubusercontent.com/PhMajerus/ANSI-art/master/' + a}));\n  let ansiUriArr = ansiFileNames.map(a => ({name: a, path: '/' + a}));\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={3}>\n        <div style={{border: '1px solid black'}}>\n          <h2 className={classes.sectionH2}>Recently Saved Blocks ({limit})</h2>\n          <Grid container spacing={3,0} >\n            {ansiUriArr.map((uri, i) => (\n                <Grid key={\"ansi2-\" + i} item xs >\n                  <Paper className={classes.paper}>\n                    <div className=\"ansi-wrapper\" style={{maxWidth: 400}}>\n                      <AnsiImageRender style={{fontSize: 24, lineHeight: '24px', height: 240, width: 284 }} tokenURI={uri.path} />\n                    </div>\n                    <h3>FILE: {uri.name}</h3>\n                    <ul><li>Row: 66</li><li>Col: 6</li><li>Owner: 0x92928...13812313</li></ul>\n                  </Paper>\n                </Grid>\n            ))}\n\n          </Grid>\n        </div>\n      </Grid>\n    </div>\n  )\n}\n\nfunction MintBlockCard({ readContracts, blockMintFee } ) {\n  //const tokenSupply = useContractReader(readContracts, \"BBoard\", \"tokenSupply\");\n  const tokenSupply = useContractReader(readContracts, \"BBoard\", \"getBBlockIdCounter\");\n\n  const nextBlockID = tokenSupply ? tokenSupply.toNumber() + 1 : 0; // XXX check, off by 1?\n  const classes = useStyles();\n  return (\n        <Grid item xs >\n          <Paper className={classes.paper} style={{backgroundColor: 'ghostwhite'}} >\n            <div className=\"ansi-wrapper\" style={{color: 'white', maxWidth: 400}}>\n              <AnsiImageRender style={{fontSize: 24, lineHeight: '24px', height: 240, width: 284 }} tokenURI={'buynextblock.txt'} />\n            </div>\n            <h3>THIS NEXT BLOCK COULD BE YOURS!!!</h3>\n            <h3>Mint fee: {blockMintFee ? blockMintFee.toString() : '...loading' }</h3>\n            <ul><li>Row: {Math.floor(nextBlockID / 4)}</li><li>Col: {nextBlockID % 4}</li><li>Owner: YOU???</li></ul>\n          </Paper>\n        </Grid>\n  )\n}\n\nfunction BlockCardsForSale({ tx, readContracts, writeContracts, browserAddress, blockMintFee } ) {\n  //return (<span>BlockCardsForSale is broken</span>);\n  const bBlocks = useContractReader(readContracts, \"BBoard\", \"fetchBBlocksForSale\");\n  // [bblockId, owner, price, seller]\n  return bBlocks ? bBlocks.map((b) => (<BlockCard tx={tx} writeContracts={writeContracts} readContracts={readContracts} browserAddress={browserAddress} blockMintFee={blockMintFee} tokenId={b.bblockId} ownerAddress={b.owner} seller={b.seller} price={b.price} />)) : (<span>...loading</span>);\n}\n\nfunction BlockCardsByAddress({ tx, readContracts, writeContracts, browserAddress, blockMintFee, ownerAddress } ) {\n  const bBlocks = useContractReader(readContracts, \"BBoard\", \"fetchBBlocksByAddress\", [ownerAddress]);\n  // [bblockId, owner, price, seller]\n  return bBlocks ? bBlocks.map((b) => (<BlockCard tx={tx} writeContracts={writeContracts} readContracts={readContracts} browserAddress={browserAddress} blockMintFee={blockMintFee} tokenId={b.bblockId} ownerAddress={b.owner} seller={b.seller} price={b.price} />)) : (<span>...loading</span>);\n}\n\nfunction BlockCard({ tx, readContracts, writeContracts, blockMintFee, browserAddress, tokenId, ownerAddress, seller, price } ) {\n  const tokenURI = useContractReader(readContracts, \"BBoard\", \"tokenURI\", [tokenId]);\n  // XXX is tokenId and bBlockId the same? is it reliable to calculate position?\n  const classes = useStyles();\n  const defaultSellPrice = 1000;\n  let localTokenId = tokenId.toNumber();\n  return (\n        <Grid key={tokenId} item xs >\n          <Paper className={classes.paper} style={{maxWidth: 400}}>\n            <div className=\"ansi-wrapper\" style={{display: 'inline-block'}} >\n              <AnsiImageRender style={{fontSize: 24, lineHeight: '24px', height: 240, width: 284 }} tokenURI={tokenURI ? tokenURI : 'tna1.ans'} />\n            </div>\n            <h3>URI: {tokenURI}</h3>\n            <ul>\n              <li>TokenId: {localTokenId}</li>\n              <li>Row: {Math.floor(tokenId / 4)}</li>\n              <li>Col: {tokenId % 4}</li>\n              <li>Owner: {ownerAddress}</li>\n              <li>Sale Status: {seller}</li>\n              <li>Price: {price ? price.toString() : 'N/A'}</li>\n            </ul>\n            <ShowUpdateTokenUriModalDialog tokenId={localTokenId} isDefaultOpen={false} tx={tx} writeContracts={writeContracts} hideButton={false} />\n            <Button\n              /* MUI color=\"primary\" variant=\"outlined\" */\n              type=\"primary\" size=\"large\"\n              disabled={ownerAddress != browserAddress}\n              style={{ marginTop: 8 }}\n              onClick={async () => {\n                /* look how you call setPurpose on your contract: */\n                /* notice how you pass a call back for tx updates too */\n                // TODO function doesn't return but emits event we should watch for\n                const result = tx(writeContracts.BBoard.sellBBlock(tokenId, defaultSellPrice, {\n                  value: blockMintFee\n                }), update => {\n                  console.log(\"📡 Transaction Update:\", update);\n                  if (update && (update.status === \"confirmed\" || update.status === 1)) {\n                    console.log(\" 🍾 Transaction \" + update.hash + \" finished!\");\n                    console.log(\n                      \" ⛽️ \" +\n                      update.gasUsed +\n                      \"/\" +\n                      (update.gasLimit || update.gas) +\n                      \" @ \" +\n                      parseFloat(update.gasPrice) / 1000000000 +\n                      \" gwei\",\n                    );\n                  }\n                });\n                console.log(\"awaiting metamask/web3 confirm result...\", result);\n                console.log(await result);\n              }}\n            >\n              Put For Sale @{defaultSellPrice}!\n            </Button>\n          </Paper>\n        </Grid>\n  )\n}\n\nexport default function MyBlocks({\n  blockMintFee,\n  myBBlocksCount,\n  purpose,\n  setPurposeEvents,\n  address,\n  filterAddress,\n  setFilterAddress,\n  mainnetProvider,\n  localProvider,\n  yourLocalBalance,\n  price,\n  tx,\n  readContracts,\n  writeContracts,\n}) {\n  const classes = useStyles();\n  const [newFilterAddress, setNewFilterAddress] = useState();\n  const [addressBlockCount, setAddressBlockCount] = useState('...');\n  const [newTokenId, setNewTokenId] = useState(0);\n  const [showUpdateTokenUriModal, setshowUpdateTokenUriModal] = useState(false);\n\n\n  const blocksCount = myBBlocksCount ? (\n    address == filterAddress ? myBBlocksCount.toNumber() : addressBlockCount\n  ) : 0;\n\n  return (\n    <div>\n      {/*\n        ⚙️ Here is an example UI that displays and sets the purpose in your smart contract:\n      */}\n      <div style={{ border: \"1px solid #cccccc\", padding: 16, /*width: 400,*/ margin: \"auto\", marginTop: 64 }}>\n        {/*<h2>Bulletin Block System Permissionless Distributed UI:</h2>*/}\n        {/* <h4>purpose: {purpose}</h4> */}\n        <MainScroll />\n        <Grid container justifyContent=\"center\">\n          <Grid item>\n            <h2 className={classes.sectionH2}>{filterAddress == addressBlockCount ? 'Your Blocks' : 'Blocks By Address'} ({blocksCount})</h2>\n            <p>currently {addressBlockCount} blocks at {filterAddress}</p>\n            <Input\n              onChange={e => {\n                setNewFilterAddress(e.target.value);\n              }}\n            />\n            <Button>XXX Bug: You need to switch tabs to refresh the new blocks</Button>\n            <Button\n              style={{ marginTop: 8 }}\n              onClick={async () => {\n                let addr;\n                try {\n                  addr = ethers.utils.getAddress(newFilterAddress);\n                } catch(e) {\n                  console.log('bad address ', newFilterAddress);\n                  return;\n                }\n                setFilterAddress(addr);\n                const result = await tx(readContracts.BBoard.balanceOf(addr));\n                setAddressBlockCount(result.toNumber());\n              }}\n            >Show Blocks of Another Address\n            </Button>\n            <Grid container spacing={3,0} >\n              <BlockCardsByAddress tx={tx} readContracts={readContracts} writeContracts={writeContracts} browserAddress={address} blockMintFee={blockMintFee} ownerAddress={filterAddress} />\n            </Grid>\n            <Grid container spacing={3}>\n              <Grid item>\n                <p>\n                  <a href=\"#\">Load more... (assuming there are more)</a>\n                </p>\n              </Grid>\n            </Grid>\n            <h2 style={{fontFamily: '\"Roboto\", sans-serif', fontSize: '4em', fontWeight: 800}} className='foobar'>Blocks For Sale</h2>\n            <Grid container spacing={3,0} >\n              <BlockCardsForSale tx={tx} readContracts={readContracts} writeContracts={writeContracts} browserAddress={address} blockMintFee={blockMintFee} />\n            </Grid>\n            <Grid container spacing={3}>\n              <Grid item>\n                <p>\n                  <a href=\"#\">Load more... (assuming there are more)</a>\n                </p>\n              </Grid>\n            </Grid>\n            <h2 style={{fontFamily: '\"Roboto\", sans-serif', fontSize: '4em', fontWeight: 800}} className='foobar'>Mint an Empty Block</h2>\n            <Grid container justifyContent=\"center\"><Grid item>\n              <MintBlockCard readContracts={readContracts} blockMintFee={blockMintFee} />\n            </Grid></Grid>\n            <Button\n              /* MUI color=\"primary\" variant=\"outlined\" */\n              type=\"primary\" size=\"large\"\n              style={{ marginTop: 8 }}\n              onClick={async () => {\n                /* look how you call setPurpose on your contract: */\n                /* notice how you pass a call back for tx updates too */\n                // TODO we need to await return value of the function which is tokenId/bBlockId\n                //const result = tx(writeContracts.BBoard.createToken({\n                const _tx = await writeContracts.BBoard.createToken({\n                  value: blockMintFee\n                });/*, update => {\n                  console.log(\"📡 Transaction Update:\", update);\n                  if (update && (update.status === \"confirmed\" || update.status === 1)) {\n                    console.log(\" 🍾 Transaction \" + update.hash + \" finished!\");\n                    console.log(\n                      \" ⛽️ \" +\n                      update.gasUsed +\n                      \"/\" +\n                      (update.gasLimit || update.gas) +\n                      \" @ \" +\n                      parseFloat(update.gasPrice) / 1000000000 +\n                      \" gwei\",\n                    );\n                  }\n                });\n                console.log(\"awaiting metamask/web3 confirm result...\", result);\n                console.log(await result);\n                */\n                let receipt = await _tx.wait(1);\n                console.log(receipt);\n                let evt = receipt.events.pop();\n                console.assert(evt.event == \"BBlockCreated\", \"bad event returned\");\n                console.log(evt);\n                //console.log('RETURNED ', evt.args.tokenId);\n                console.log('RETURNED ', evt.args[0].toNumber());\n                // TODO save this new bblockId in local state, load it above in Your Blocks\n\n                if (evt.event == \"BBlockCreated\") {\n                  let mintedTokenId = evt.args[0].toNumber();\n                  console.log('block minted', mintedTokenId);\n                  setNewTokenId(mintedTokenId);\n                  setshowUpdateTokenUriModal(true);\n                }\n              }}\n            >\n              Mint!\n            </Button>\n            {showUpdateTokenUriModal && newTokenId && \n            <ShowUpdateTokenUriModalDialog tokenId={newTokenId} isDefaultOpen={true} tx={tx} writeContracts={writeContracts} hideButton={true} onClose={() =>setshowUpdateTokenUriModal(false)}/>\n            }\n          </Grid>\n        </Grid>\n        <Divider />\n        <RecentlySavedBlocks limit={3} />\n        <Divider />\n      </div>\n    </div>\n  );\n}\n","import { utils } from \"ethers\";\nimport { Select } from \"antd\";\nimport React, { useState } from \"react\";\nimport { Address, AddressInput } from \"../components\";\nimport { useTokenList } from \"../hooks\";\n\nconst { Option } = Select;\n\nexport default function Hints({ yourLocalBalance, mainnetProvider, price, address }) {\n  // Get a list of tokens from a tokenlist -> see tokenlists.org!\n  const [selectedToken, setSelectedToken] = useState(\"Pick a token!\");\n  const listOfTokens = useTokenList(\n    \"https://raw.githubusercontent.com/SetProtocol/uniswap-tokenlist/main/set.tokenlist.json\",\n  );\n\n  return (\n    <div>\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>👷</span>\n        Edit your <b>contract</b> in\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/hardhat/contracts\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🛰</span>\n        <b>compile/deploy</b> with\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run deploy\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🚀</span>\n        Your <b>contract artifacts</b> are automatically injected into your frontend at\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/react-app/src/contracts/\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🎛</span>\n        Edit your <b>frontend</b> in\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/reactapp/src/App.js\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>🔭</span>\n        explore the\n        <span\n          className=\"highlight\"\n          style={{\n            marginLeft: 4,\n            marginRight: 4,\n            /* backgroundColor: \"#f9f9f9\", */\n            padding: 4,\n            borderRadius: 4,\n            fontWeight: \"bolder\",\n          }}\n        >\n          🖇 hooks\n        </span>\n        and\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          📦 components\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        for example, the\n        <span\n          className=\"highlight\"\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          useBalance()\n        </span>{\" \"}\n        hook keeps track of your balance: <b>{utils.formatEther(yourLocalBalance || 0)}</b>\n      </div>\n\n      <div style={{ margin: 8 }}>\n        <div>\n          <b>useTokenList()</b> can get you an array of tokens from{\" \"}\n          <a href=\"https://tokenlists.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n            tokenlists.org!\n          </a>\n        </div>\n        <Select\n          showSearch\n          value={selectedToken}\n          onChange={value => {\n            console.log(`selected ${value}`);\n            setSelectedToken(value);\n          }}\n          filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n          optionFilterProp=\"children\"\n        >\n          {listOfTokens.map(token => (\n            <Option key={token.symbol} value={token.symbol}>\n              {token.symbol}\n            </Option>\n          ))}\n        </Select>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        as you build your app you&apos;ll need web3 specific components like an\n        <span\n          className=\"highlight\"\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          {\"<AddressInput/>\"}\n        </span>\n        component:\n        <div style={{ width: 350, padding: 16, margin: \"auto\" }}>\n          <AddressInput ensProvider={mainnetProvider} />\n        </div>\n        <div>(try putting in your address, an ens address, or scanning a QR code)</div>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        this balance could be multiplied by\n        <span\n          className=\"highlight\"\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          price\n        </span>{\" \"}\n        that is loaded with the\n        <span\n          className=\"highlight\"\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          usePrice\n        </span>{\" \"}\n        hook with the current value: <b>${price}</b>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>💧</span>\n        use the <b>faucet</b> to send funds to\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          <Address address={address} minimized /> {address}\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>📡</span>\n        deploy to a testnet or mainnet by editing\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/hardhat/hardhat.config.js\n        </span>\n        and running\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run deploy\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>🔑</span>\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run generate\n        </span>\n        will create a deployer account in\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/hardhat\n        </span>\n        <div style={{ marginTop: 8 }}>\n          (use{\" \"}\n          <span\n            className=\"highlight\"\n            style={{\n              marginLeft: 4,\n              /* backgroundColor: \"#f1f1f1\", */ padding: 4,\n              borderRadius: 4,\n              fontWeight: \"bolder\",\n            }}\n          >\n            yarn run account\n          </span>{\" \"}\n          to display deployer address and balance)\n        </div>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>⚙️</span>\n        build your app with\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run build\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>🚢</span>\n        ship it!\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run surge\n        </span>\n        or\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run s3\n        </span>\n        or\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run ipfs\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>💬</span>\n        for support, join this\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\">\n            Telegram Chat\n          </a>\n        </span>\n      </div>\n      <div style={{ padding: 128 }}>\n        🛠 Check out your browser&apos;s developer console for more... (inspect console) 🚀\n      </div>\n    </div>\n  );\n}\n","import { gql, useQuery } from \"@apollo/client\";\nimport { Button, Input, Table, Typography } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport GraphiQL from \"graphiql\";\nimport \"graphiql/graphiql.min.css\";\nimport fetch from \"isomorphic-fetch\";\nimport React, { useState } from \"react\";\nimport { Address } from \"../components\";\n\nconst highlight = {\n  marginLeft: 4,\n  marginRight: 8,\n  /* backgroundColor: \"#f9f9f9\", */ padding: 4,\n  borderRadius: 4,\n  fontWeight: \"bolder\",\n};\n\nfunction Subgraph(props) {\n  function graphQLFetcher(graphQLParams) {\n    return fetch(props.subgraphUri, {\n      method: \"post\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(graphQLParams),\n    }).then(response => response.json());\n  }\n\n  const EXAMPLE_GRAPHQL = `\n  {\n    purposes(first: 25, orderBy: createdAt, orderDirection: desc) {\n      id\n      purpose\n      createdAt\n      sender {\n        id\n      }\n    }\n    senders {\n      id\n      address\n      purposeCount\n    }\n  }\n  `;\n  const EXAMPLE_GQL = gql(EXAMPLE_GRAPHQL);\n  const { loading, data } = useQuery(EXAMPLE_GQL, { pollInterval: 2500 });\n\n  const purposeColumns = [\n    {\n      title: \"Purpose\",\n      dataIndex: \"purpose\",\n      key: \"purpose\",\n    },\n    {\n      title: \"Sender\",\n      key: \"id\",\n      render: record => <Address value={record.sender.id} ensProvider={props.mainnetProvider} fontSize={16} />,\n    },\n    {\n      title: \"createdAt\",\n      key: \"createdAt\",\n      dataIndex: \"createdAt\",\n      render: d => new Date(d * 1000).toISOString(),\n    },\n  ];\n\n  const [newPurpose, setNewPurpose] = useState(\"loading...\");\n\n  const deployWarning = (\n    <div style={{ marginTop: 8, padding: 8 }}>Warning: 🤔 Have you deployed your subgraph yet?</div>\n  );\n\n  return (\n    <>\n      <div style={{ margin: \"auto\", marginTop: 32 }}>\n        You will find that parsing/tracking events with the{\" \"}\n        <span className=\"highlight\" style={highlight}>\n          useEventListener\n        </span>{\" \"}\n        hook becomes a chore for every new project.\n      </div>\n      <div style={{ margin: \"auto\", marginTop: 32 }}>\n        Instead, you can use{\" \"}\n        <a href=\"https://thegraph.com/docs/introduction\" target=\"_blank\" rel=\"noopener noreferrer\">\n          The Graph\n        </a>{\" \"}\n        with 🏗 scaffold-eth (\n        <a href=\"https://youtu.be/T5ylzOTkn-Q\" target=\"_blank\" rel=\"noopener noreferrer\">\n          learn more\n        </a>\n        ):\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🚮</span>\n        Clean up previous data:\n        <span className=\"highlight\" style={highlight}>\n          yarn clean-graph-node\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>📡</span>\n        Spin up a local graph node by running\n        <span className=\"highlight\" style={highlight}>\n          yarn run-graph-node\n        </span>\n        <span style={{ marginLeft: 4 }}>\n          {\" \"}\n          (requires{\" \"}\n          <a href=\"https://www.docker.com/products/docker-desktop\" target=\"_blank\" rel=\"noopener noreferrer\">\n            {\" \"}\n            Docker\n          </a>\n          ){\" \"}\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>📝</span>\n        Create your <b>local subgraph</b> by running\n        <span className=\"highlight\" style={highlight}>\n          yarn graph-create-local\n        </span>\n        (only required once!)\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🚢</span>\n        Deploy your <b>local subgraph</b> by running\n        <span className=\"highlight\" style={highlight}>\n          yarn graph-ship-local\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🖍️</span>\n        Edit your <b>local subgraph</b> in\n        <span className=\"highlight\" style={highlight}>\n          packages/subgraph/src\n        </span>\n        (learn more about subgraph definition{\" \"}\n        <a href=\"https://thegraph.com/docs/define-a-subgraph\" target=\"_blank\" rel=\"noopener noreferrer\">\n          here\n        </a>\n        )\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🤩</span>\n        Deploy your <b>contracts and your subgraph</b> in one go by running\n        <span className=\"highlight\" style={highlight}>\n          yarn deploy-and-graph\n        </span>\n      </div>\n\n      <div style={{ width: 780, margin: \"auto\", paddingBottom: 64 }}>\n        <div style={{ margin: 32, textAlign: \"right\" }}>\n          <Input\n            onChange={e => {\n              setNewPurpose(e.target.value);\n            }}\n          />\n          <Button\n            onClick={() => {\n              console.log(\"newPurpose\", newPurpose);\n              /* look how you call setPurpose on your contract: */\n              props.tx(props.writeContracts.YourContract.setPurpose(newPurpose));\n            }}\n          >\n            Set Purpose\n          </Button>\n        </div>\n\n        {data ? (\n          <Table dataSource={data.purposes} columns={purposeColumns} rowKey=\"id\" />\n        ) : (\n          <Typography>{loading ? \"Loading...\" : deployWarning}</Typography>\n        )}\n\n        <div style={{ margin: 32, height: 400, border: \"1px solid #888888\", textAlign: \"left\" }}>\n          <GraphiQL fetcher={graphQLFetcher} docExplorerOpen query={EXAMPLE_GRAPHQL} />\n        </div>\n      </div>\n\n      <div style={{ padding: 64 }}>...</div>\n    </>\n  );\n}\n\nexport default Subgraph;\n","import WalletConnectProvider from \"@walletconnect/web3-provider\";\n//import Torus from \"@toruslabs/torus-embed\"\nimport WalletLink from \"walletlink\";\nimport { Alert, Button, Col, Menu, Row } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { HashRouter, Link, Route, Switch } from \"react-router-dom\";\nimport Web3Modal from \"web3modal\";\nimport \"./App.css\";\nimport { Account, Contract, Faucet, GasGauge, Header, Ramp, ThemeSwitch } from \"./components\";\nimport { INFURA_ID, NETWORK, NETWORKS } from \"./constants\";\nimport { Transactor } from \"./helpers\";\nimport {\n  useBalance,\n  useContractLoader,\n  useContractReader,\n  useEventListener,\n  useExchangePrice,\n  useGasPrice,\n  useOnBlock,\n  useUserSigner,\n} from \"./hooks\";\n// import Hints from \"./Hints\";\nimport { ExampleUI, About, MyBlocks, Hints, Subgraph } from \"./views\";\n\nconst { ethers } = require(\"ethers\");\n/*\n    Welcome to 🏗 scaffold-eth !\n\n    Code:\n    https://github.com/austintgriffith/scaffold-eth\n\n    Support:\n    https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\n    or DM @austingriffith on twitter or telegram\n\n    You should get your own Infura.io ID and put it in `constants.js`\n    (this is your connection to the main Ethereum network for ENS etc.)\n\n\n    🌏 EXTERNAL CONTRACTS:\n    You can also bring in contract artifacts in `constants.js`\n    (and then use the `useExternalContractLoader()` hook!)\n*/\n\n/// 📡 What chain are your contracts deployed to?\nconst targetNetwork = NETWORKS.localhost; // <------- select your target frontend network (localhost, rinkeby, xdai, mainnet)\n\n// 😬 Sorry for all the console logging\nconst DEBUG = true;\nconst NETWORKCHECK = true;\n\n// 🛰 providers\nif (DEBUG) console.log(\"📡 Connecting to Mainnet Ethereum\");\n// const mainnetProvider = getDefaultProvider(\"mainnet\", { infura: INFURA_ID, etherscan: ETHERSCAN_KEY, quorum: 1 });\n// const mainnetProvider = new InfuraProvider(\"mainnet\",INFURA_ID);\n//\n// attempt to connect to our own scaffold eth rpc and if that fails fall back to infura...\n// Using StaticJsonRpcProvider as the chainId won't change see https://github.com/ethers-io/ethers.js/issues/901\nconst scaffoldEthProvider = null; // navigator.onLine ? new ethers.providers.StaticJsonRpcProvider(\"https://rpc.scaffoldeth.io:48544\") : null;\nconst mainnetInfura = navigator.onLine\n  ? new ethers.providers.StaticJsonRpcProvider(\"https://mainnet.infura.io/v3/\" + INFURA_ID)\n  : null;\n// ( ⚠️ Getting \"failed to meet quorum\" errors? Check your INFURA_I )\n\n// 🏠 Your local provider is usually pointed at your local blockchain\nconst localProviderUrl = targetNetwork.rpcUrl;\n// as you deploy to other networks you can set REACT_APP_PROVIDER=https://dai.poa.network in packages/react-app/.env\nconst localProviderUrlFromEnv = process.env.REACT_APP_PROVIDER ? process.env.REACT_APP_PROVIDER : localProviderUrl;\nif (DEBUG) console.log(\"🏠 Connecting to provider:\", localProviderUrlFromEnv);\nconst localProvider = new ethers.providers.StaticJsonRpcProvider(localProviderUrlFromEnv);\n\n// 🔭 block explorer URL\nconst blockExplorer = targetNetwork.blockExplorer;\n\n// Coinbase walletLink init\nconst walletLink = new WalletLink({\n  appName: \"coinbase\",\n});\n\n// WalletLink provider\nconst walletLinkProvider = walletLink.makeWeb3Provider(`https://mainnet.infura.io/v3/${INFURA_ID}`, 1);\n\n/*\n  Web3 modal helps us \"connect\" external wallets:\n*/\nconst web3Modal = new Web3Modal({\n  network: \"mainnet\", // Optional. If using WalletConnect on xDai, change network to \"xdai\" and add RPC info below for xDai chain.\n  cacheProvider: true, // optional\n  theme: \"light\", // optional. Change to \"dark\" for a dark theme.\n  providerOptions: {\n    walletconnect: {\n      package: WalletConnectProvider, // required\n      options: {\n        bridge: \"https://polygon.bridge.walletconnect.org\",\n        infuraId: INFURA_ID,\n        rpc: {\n          1: `https://mainnet.infura.io/v3/${INFURA_ID}`, // mainnet // For more WalletConnect providers: https://docs.walletconnect.org/quick-start/dapps/web3-provider#required\n          100: \"https://dai.poa.network\", // xDai\n        },\n      },\n    },\n    /*torus: {\n      package: Torus,\n    },*/\n    \"custom-walletlink\": {\n      display: {\n        logo: \"https://play-lh.googleusercontent.com/PjoJoG27miSglVBXoXrxBSLveV6e3EeBPpNY55aiUUBM9Q1RCETKCOqdOkX2ZydqVf0\",\n        name: \"Coinbase\",\n        description: \"Connect to Coinbase Wallet (not Coinbase App)\",\n      },\n      package: walletLinkProvider,\n      connector: async (provider, options) => {\n        await provider.enable();\n        return provider;\n      },\n    },\n  },\n});\n\nfunction App(props) {\n  const mainnetProvider = scaffoldEthProvider && scaffoldEthProvider._network ? scaffoldEthProvider : mainnetInfura;\n\n  const [injectedProvider, setInjectedProvider] = useState();\n  const [address, setAddress] = useState();\n  const [filterAddress, setFilterAddress] = useState();\n\n  const logoutOfWeb3Modal = async () => {\n    await web3Modal.clearCachedProvider();\n    if (injectedProvider && injectedProvider.provider && typeof injectedProvider.provider.disconnect == \"function\") {\n      await injectedProvider.provider.disconnect();\n    }\n    setTimeout(() => {\n      window.location.reload();\n    }, 1);\n  };\n\n  /* 💵 This hook will get the price of ETH from 🦄 Uniswap: */\n  const price = useExchangePrice(targetNetwork, mainnetProvider);\n\n  /* 🔥 This hook will get the price of Gas from ⛽️ EtherGasStation */\n  const gasPrice = useGasPrice(targetNetwork, \"fast\");\n  // Use your injected provider from 🦊 Metamask or if you don't have it then instantly generate a 🔥 burner wallet.\n  const userSigner = useUserSigner(injectedProvider, localProvider);\n\n  useEffect(() => {\n    async function getAddress() {\n      if (userSigner) {\n        const newAddress = await userSigner.getAddress();\n        setAddress(newAddress);\n      }\n    }\n    getAddress();\n  }, [userSigner]);\n\n  // You can warn the user if you would like them to be on a specific network\n  const localChainId = localProvider && localProvider._network && localProvider._network.chainId;\n  const selectedChainId =\n    userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\n\n  // For more hooks, check out 🔗eth-hooks at: https://www.npmjs.com/package/eth-hooks\n\n  // The transactor wraps transactions and provides notificiations\n  const tx = Transactor(userSigner, gasPrice);\n\n  // Faucet Tx can be used to send funds from the faucet\n  const faucetTx = Transactor(localProvider, gasPrice);\n\n  // 🏗 scaffold-eth is full of handy hooks like this one to get your balance:\n  const yourLocalBalance = useBalance(localProvider, address);\n\n  // Just plug in different 🛰 providers to get your balance on different chains:\n  const yourMainnetBalance = useBalance(mainnetProvider, address);\n\n  // Load in your local 📝 contract and read a value from it:\n  const readContracts = useContractLoader(localProvider);\n\n  // If you want to make 🔐 write transactions to your contracts, use the userSigner:\n  const writeContracts = useContractLoader(userSigner, { chainId: localChainId });\n\n  // EXTERNAL CONTRACT EXAMPLE:\n  //\n  // If you want to bring in the mainnet DAI contract it would look like:\n  const mainnetContracts = useContractLoader(mainnetProvider);\n\n  // If you want to call a function on a new block\n  useOnBlock(mainnetProvider, () => {\n    console.log(`⛓ A new mainnet block is here: ${mainnetProvider._lastBlockNumber}`);\n  });\n\n  // Then read your DAI balance like:\n  const myMainnetDAIBalance = useContractReader(mainnetContracts, \"DAI\", \"balanceOf\", [\n    \"0x34aA3F359A9D614239015126635CE7732c18fDF3\",\n  ]);\n\n  // keep track of a variable from the contract in the local React state:\n  const purpose = useContractReader(readContracts, \"YourContract\", \"purpose\");\n  const blockMintFee = useContractReader(readContracts, \"BBoard\", \"getBasefee\");\n  const myBBlocksCount = useContractReader(readContracts, \"BBoard\", \"balanceOf\", [address]);\n  //const my1stBBlockTokenId = useContractReader(readContracts, \"BBoard\", \"tokenOfOwnerByIndex\", [address, 0]); // this would fail if no tokens owned\n  //const my1stBBlockTokenURI = useContractReader(readContracts, \"BBoard\", \"tokenURI\", [my1stBBlockTokenId]); // this would fail if no tokens owned\n\n  // 📟 Listen for broadcast events\n  const setPurposeEvents = useEventListener(readContracts, \"YourContract\", \"SetPurpose\", localProvider, 1);\n\n  /*\n  const addressFromENS = useResolveName(mainnetProvider, \"austingriffith.eth\");\n  console.log(\"🏷 Resolved austingriffith.eth as:\",addressFromENS)\n  */\n\n  //\n  // 🧫 DEBUG 👨🏻‍🔬\n  //\n  useEffect(() => {\n    if (\n      DEBUG &&\n      mainnetProvider &&\n      address &&\n      selectedChainId &&\n      yourLocalBalance &&\n      yourMainnetBalance &&\n      readContracts &&\n      writeContracts &&\n      mainnetContracts\n    ) {\n      console.log(\"_____________________________________ 🏗 scaffold-eth _____________________________________\");\n      console.log(\"🌎 mainnetProvider\", mainnetProvider);\n      console.log(\"🏠 localChainId\", localChainId);\n      console.log(\"👩‍💼 selected address:\", address);\n      console.log(\"🕵🏻‍♂️ selectedChainId:\", selectedChainId);\n      console.log(\"💵 yourLocalBalance\", yourLocalBalance ? ethers.utils.formatEther(yourLocalBalance) : \"...\");\n      console.log(\"💵 yourMainnetBalance\", yourMainnetBalance ? ethers.utils.formatEther(yourMainnetBalance) : \"...\");\n      console.log(\"📝 readContracts\", readContracts);\n      console.log(\"🌍 DAI contract on mainnet:\", mainnetContracts);\n      console.log(\"💵 yourMainnetDAIBalance\", myMainnetDAIBalance);\n      console.log(\"🔐 writeContracts\", writeContracts);\n    }\n  }, [\n    mainnetProvider,\n    address,\n    selectedChainId,\n    yourLocalBalance,\n    yourMainnetBalance,\n    readContracts,\n    writeContracts,\n    mainnetContracts,\n  ]);\n\n  let networkDisplay = \"\";\n  if (NETWORKCHECK && localChainId && selectedChainId && localChainId !== selectedChainId) {\n    const networkSelected = NETWORK(selectedChainId);\n    const networkLocal = NETWORK(localChainId);\n    if (selectedChainId === 1337 && localChainId === 31337) {\n      networkDisplay = (\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\n          <Alert\n            message=\"⚠️ Wrong Network ID\"\n            description={\n              <div>\n                You have <b>chain id 1337</b> for localhost and you need to change it to <b>31337</b> to work with\n                HardHat.\n                <div>(MetaMask -&gt; Settings -&gt; Networks -&gt; Chain ID -&gt; 31337)</div>\n              </div>\n            }\n            type=\"error\"\n            closable={false}\n          />\n        </div>\n      );\n    } else {\n      networkDisplay = (\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\n          <Alert\n            message=\"⚠️ Wrong Network\"\n            description={\n              <div>\n                You have <b>{networkSelected && networkSelected.name}</b> selected and you need to be on{\" \"}\n                <Button\n                  onClick={async () => {\n                    const ethereum = window.ethereum;\n                    const data = [\n                      {\n                        chainId: \"0x\" + targetNetwork.chainId.toString(16),\n                        chainName: targetNetwork.name,\n                        nativeCurrency: targetNetwork.nativeCurrency,\n                        rpcUrls: [targetNetwork.rpcUrl],\n                        blockExplorerUrls: [targetNetwork.blockExplorer],\n                      },\n                    ];\n                    console.log(\"data\", data);\n                    const tx = await ethereum.request({ method: \"wallet_addEthereumChain\", params: data }).catch();\n                    if (tx) {\n                      console.log(tx);\n                    }\n                  }}\n                >\n                  <b>{networkLocal && networkLocal.name}</b>\n                </Button>\n                .\n              </div>\n            }\n            type=\"error\"\n            closable={false}\n          />\n        </div>\n      );\n    }\n  } else {\n    networkDisplay = (\n      <div style={{ zIndex: -1, position: \"absolute\", right: 154, top: 28, padding: 16, color: targetNetwork.color }}>\n        {targetNetwork.name}\n      </div>\n    );\n  }\n\n  const loadWeb3Modal = useCallback(async () => {\n    const provider = await web3Modal.connect();\n    setInjectedProvider(new ethers.providers.Web3Provider(provider));\n\n    provider.on(\"chainChanged\", chainId => {\n      console.log(`chain changed to ${chainId}! updating providers`);\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\n    });\n\n    provider.on(\"accountsChanged\", () => {\n      console.log(`account changed!`);\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\n    });\n\n    // Subscribe to session disconnection\n    provider.on(\"disconnect\", (code, reason) => {\n      console.log(code, reason);\n      logoutOfWeb3Modal();\n    });\n  }, [setInjectedProvider]);\n\n  useEffect(() => {\n    if (web3Modal.cachedProvider) {\n      loadWeb3Modal();\n    }\n  }, [loadWeb3Modal]);\n\n  const [route, setRoute] = useState();\n  useEffect(() => {\n    setRoute(window.location.pathname);\n  }, [setRoute]);\n\n  let faucetHint = \"\";\n  const faucetAvailable = localProvider && localProvider.connection && targetNetwork.name.indexOf(\"local\") !== -1;\n\n  const [faucetClicked, setFaucetClicked] = useState(false);\n  if (\n    !faucetClicked &&\n    localProvider &&\n    localProvider._network &&\n    localProvider._network.chainId === 31337 &&\n    yourLocalBalance &&\n    ethers.utils.formatEther(yourLocalBalance) <= 10\n  ) {\n    faucetHint = (\n      <div style={{ padding: 16 }}>\n        <Button\n          type=\"primary\"\n          onClick={() => {\n            faucetTx({\n              to: address,\n              value: ethers.utils.parseEther(\"1000\"),\n            });\n            setFaucetClicked(true);\n          }}\n        >\n          💰 Grab funds from the faucet ⛽️\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      {/* ✏️ Edit the header and change the title to your project name */}\n      <Header />\n      {networkDisplay}\n      <HashRouter>\n        <Menu style={{ textAlign: \"center\" }} selectedKeys={[route]} mode=\"horizontal\">\n          <Menu.Item key=\"/\">\n            <Link\n              onClick={() => {\n                setRoute(\"/\");\n              }}\n              to=\"/\"\n            >\n              YourContract\n            </Link>\n          </Menu.Item>\n          <Menu.Item key=\"/hints\">\n            <Link\n              onClick={() => {\n                setRoute(\"/hints\");\n              }}\n              to=\"/hints\"\n            >\n              Hints\n            </Link>\n          </Menu.Item>\n          <Menu.Item key=\"/about\">\n            <Link\n              onClick={() => {\n                setRoute(\"/about\");\n              }}\n              to=\"/about\"\n            >\n              About BBS\n            </Link>\n          </Menu.Item>\n          <Menu.Item key=\"/blocks\">\n            <Link\n              onClick={() => {\n                setRoute(\"/blocks\");\n              }}\n              to=\"/blocks\"\n            >\n              My Blocks\n            </Link>\n          </Menu.Item>\n          <Menu.Item key=\"/exampleui\">\n            <Link\n              onClick={() => {\n                setRoute(\"/exampleui\");\n              }}\n              to=\"/exampleui\"\n            >\n              ExampleUI\n            </Link>\n          </Menu.Item>\n        </Menu>\n\n        <Switch>\n          <Route exact path=\"/\">\n            {/*\n                🎛 this scaffolding is full of commonly used components\n                this <Contract/> component will automatically parse your ABI\n                and give you a form to interact with it locally\n            */}\n\n            {/* <Contract\n              name=\"YourContract\"\n              signer={userSigner}\n              provider={localProvider}\n              address={address}\n              blockExplorer={blockExplorer}\n            /> */}\n            {/* <Contract\n              name=\"NFT\"\n              signer={userSigner}\n              provider={localProvider}\n              address={address}\n              blockExplorer={blockExplorer}\n            /> */}\n            <Contract\n              name=\"BBoard\"\n              signer={userSigner}\n              provider={localProvider}\n              address={address}\n              blockExplorer={blockExplorer}\n            />\n          </Route>\n          <Route path=\"/hints\">\n            <Hints\n              address={address}\n              yourLocalBalance={yourLocalBalance}\n              mainnetProvider={mainnetProvider}\n              price={price}\n            />\n          </Route>\n          <Route path=\"/exampleui\">\n            <ExampleUI\n              address={address}\n              userSigner={userSigner}\n              mainnetProvider={mainnetProvider}\n              localProvider={localProvider}\n              yourLocalBalance={yourLocalBalance}\n              price={price}\n              tx={tx}\n              writeContracts={writeContracts}\n              readContracts={readContracts}\n              purpose={purpose}\n              setPurposeEvents={setPurposeEvents}\n              myBBlocksCount={myBBlocksCount}\n            />\n          </Route>\n          <Route path=\"/about\">\n            <About\n              address={address}\n              userSigner={userSigner}\n              mainnetProvider={mainnetProvider}\n              localProvider={localProvider}\n              yourLocalBalance={yourLocalBalance}\n              price={price}\n              tx={tx}\n              writeContracts={writeContracts}\n              readContracts={readContracts}\n              purpose={purpose}\n              setPurposeEvents={setPurposeEvents}\n              myBBlocksCount={myBBlocksCount}\n            />\n          </Route>\n          <Route path=\"/blocks\">\n            <MyBlocks\n              blockMintFee={blockMintFee}\n              address={address}\n              filterAddress={filterAddress ? filterAddress : address}\n              setFilterAddress={setFilterAddress}\n              userSigner={userSigner}\n              mainnetProvider={mainnetProvider}\n              localProvider={localProvider}\n              yourLocalBalance={yourLocalBalance}\n              price={price}\n              tx={tx}\n              writeContracts={writeContracts}\n              readContracts={readContracts}\n              purpose={purpose}\n              setPurposeEvents={setPurposeEvents}\n              myBBlocksCount={myBBlocksCount}\n            />\n          </Route>\n          <Route path=\"/mainnetdai\">\n            <Contract\n              name=\"DAI\"\n              customContract={mainnetContracts && mainnetContracts.contracts && mainnetContracts.contracts.DAI}\n              signer={userSigner}\n              provider={mainnetProvider}\n              address={address}\n              blockExplorer=\"https://etherscan.io/\"\n            />\n            {/*\n            <Contract\n              name=\"UNI\"\n              customContract={mainnetContracts && mainnetContracts.contracts && mainnetContracts.contracts.UNI}\n              signer={userSigner}\n              provider={mainnetProvider}\n              address={address}\n              blockExplorer=\"https://etherscan.io/\"\n            />\n            */}\n          </Route>\n          <Route path=\"/subgraph\">\n            <Subgraph\n              subgraphUri={props.subgraphUri}\n              tx={tx}\n              writeContracts={writeContracts}\n              mainnetProvider={mainnetProvider}\n            />\n          </Route>\n        </Switch>\n      </HashRouter>\n\n      <ThemeSwitch />\n\n      {/* 👨‍💼 Your account is in the top right with a wallet at connect options */}\n      <div style={{ position: \"fixed\", textAlign: \"right\", right: 0, top: 0, padding: 10 }}>\n        <Account\n          address={address}\n          localProvider={localProvider}\n          userSigner={userSigner}\n          mainnetProvider={mainnetProvider}\n          price={price}\n          web3Modal={web3Modal}\n          loadWeb3Modal={loadWeb3Modal}\n          logoutOfWeb3Modal={logoutOfWeb3Modal}\n          blockExplorer={blockExplorer}\n        />\n        {faucetHint}\n      </div>\n\n      {/* 🗺 Extra UI like gas price, eth price, faucet, and support: */}\n      <div style={{ position: \"fixed\", textAlign: \"left\", left: 0, bottom: 20, padding: 10 }}>\n        <Row align=\"middle\" gutter={[4, 4]}>\n          <Col span={8}>\n            <Ramp price={price} address={address} networks={NETWORKS} />\n          </Col>\n\n          <Col span={8} style={{ textAlign: \"center\", opacity: 0.8 }}>\n            <GasGauge gasPrice={gasPrice} />\n          </Col>\n          <Col span={8} style={{ textAlign: \"center\", opacity: 1 }}>\n            <Button\n              onClick={() => {\n                window.open(\"https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\");\n              }}\n              size=\"large\"\n              shape=\"round\"\n            >\n              <span style={{ marginRight: 8 }} role=\"img\" aria-label=\"support\">\n                💬\n              </span>\n              Support\n            </Button>\n          </Col>\n        </Row>\n\n        <Row align=\"middle\" gutter={[4, 4]}>\n          <Col span={24}>\n            {\n              /*  if the local provider has a signer, let's show the faucet:  */\n              faucetAvailable ? (\n                <Faucet localProvider={localProvider} price={price} ensProvider={mainnetProvider} />\n              ) : (\n                \"\"\n              )\n            }\n          </Col>\n        </Row>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { Fetcher, Route, Token, WETH } from \"@uniswap/sdk\";\nimport { usePoller } from \"eth-hooks\";\nimport { useState } from \"react\";\n\nexport default function useExchangePrice(targetNetwork, mainnetProvider, pollTime) {\n  const [price, setPrice] = useState(0);\n\n  const pollPrice = () => {\n    async function getPrice() {\n      if(!mainnetProvider)\n        return 0;\n      if (targetNetwork.price) {\n        setPrice(targetNetwork.price);\n      } else {\n        const DAI = new Token(\n          mainnetProvider.network ? mainnetProvider.network.chainId : 1,\n          \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n          18,\n        );\n        const pair = await Fetcher.fetchPairData(DAI, WETH[DAI.chainId], mainnetProvider);\n        const route = new Route([pair], WETH[DAI.chainId]);\n        setPrice(parseFloat(route.midPrice.toSignificant(6)));\n      }\n    }\n    getPrice();\n  };\n  usePoller(pollPrice, pollTime || 9777);\n\n  return price;\n}\n","import axios from \"axios\";\nimport { usePoller } from \"eth-hooks\";\nimport { useState } from \"react\";\n\nexport default function useGasPrice(targetNetwork, speed) {\n  const [gasPrice, setGasPrice] = useState();\n  const loadGasPrice = async () => {\n    if (targetNetwork.hasOwnProperty(\"gasPrice\")) {\n      setGasPrice(targetNetwork.gasPrice);\n    } else {\n      if(navigator.onLine){\n        axios\n          .get(\"https://ethgasstation.info/json/ethgasAPI.json\")\n          .then(response => {\n            const newGasPrice = response.data[speed || \"fast\"] * 100000000;\n            if (newGasPrice !== gasPrice) {\n              setGasPrice(newGasPrice);\n            }\n          })\n          .catch(error => console.log(error));\n      }\n    }\n  };\n\n  usePoller(loadGasPrice, 39999);\n  return gasPrice;\n}\n","import { useEffect, useState } from \"react\";\n\n/*\n  ~ What it does? ~\n\n  Enables you to keep track of events\n\n  ~ How can I use? ~\n\n  const setPurposeEvents = useEventListener(readContracts, \"YourContract\", \"SetPurpose\", localProvider, 1);\n\n  ~ Features ~\n\n  - Provide readContracts by loading contracts (see more on ContractLoader.js)\n  - Specify the name of the contract, in this case it is \"YourContract\"\n  - Specify the name of the event in the contract, in this case we keep track of \"SetPurpose\" event\n  - Specify the provider\n*/\n\nexport default function useEventListener(contracts, contractName, eventName, provider, startBlock, args) {\n  const [updates, setUpdates] = useState([]);\n\n  useEffect(() => {\n    if (typeof provider !== \"undefined\" && typeof startBlock !== \"undefined\") {\n      // if you want to read _all_ events from your contracts, set this to the block number it is deployed\n      provider.resetEventsBlock(startBlock);\n    }\n    if (contracts && contractName && contracts[contractName]) {\n      try {\n        contracts[contractName].on(eventName, (...args) => {\n          const blockNumber = args[args.length - 1].blockNumber;\n          setUpdates(messages => [{ blockNumber, ...args.pop().args }, ...messages]);\n        });\n        return () => {\n          contracts[contractName].removeListener(eventName);\n        };\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  }, [provider, startBlock, contracts, contractName, eventName]);\n\n  return updates;\n}\n","import { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\nimport React from \"react\";\nimport { ThemeSwitcherProvider } from \"react-css-theme-switcher\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nconst themes = {\n  dark: `${process.env.PUBLIC_URL}/dark-theme.css`,\n  light: `${process.env.PUBLIC_URL}/light-theme.css`,\n};\n\nconst prevTheme = window.localStorage.getItem(\"theme\");\n\nconst subgraphUri = \"http://localhost:8000/subgraphs/name/scaffold-eth/your-contract\";\n\nconst client = new ApolloClient({\n  uri: subgraphUri,\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <ThemeSwitcherProvider themeMap={themes} defaultTheme={prevTheme || \"light\"}>\n      <App subgraphUri={subgraphUri} />\n    </ThemeSwitcherProvider>\n  </ApolloProvider>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}